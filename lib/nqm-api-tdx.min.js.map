{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 456968094acc21b15b88","webpack:///external \"debug\"","webpack:///./src/helpers.js","webpack:///external \"@nqminds/nqm-core-utils\"","webpack:///external \"base-64\"","webpack:///./src/api-tdx.js","webpack:///external \"cross-fetch\""],"names":["debug","log","console","bind","fetch","window","crossFetch","FetchRequest","Request","FetchHeaders","Headers","pollingRetries","pollingInterval","waitInfinitely","fetchWithDeadline","request","Promise","resolve","reject","deadline","rejected","config","networkTimeout","setTimeout","Error","clearTimer","clearTimeout","then","response","catch","err","message","TDXApiError","code","failure","source","stack","stringVersion","JSON","stringify","from","name","prototype","Object","create","constructor","handleError","buildAuthenticateRequest","credentials","ip","ttl","uri","tdxServer","commandServer","queryServer","method","mode","headers","body","grant_type","accessTokenTTL","buildCommandRequest","command","data","contentType","async","commandMode","accessToken","buildDatabotHostRequest","databotServer","buildFileUploadRequest","resourceId","compressed","base64Encoded","file","endPoint","size","buildQueryRequest","endpoint","filter","projection","options","encodeURIComponent","query","indexOf","buildDatabotInstanceRequest","checkResponse","doNotThrow","text","jsonResponse","parse","parseError","ok","result","errors","length","join","error","error_description","status","setDefaults","tdxHost","commandHost","databotHost","queryHost","protocolComponents","split","protocol","hostComponents","hostname","slice","undefined","waitForResource","check","retryCount","maxRetries","getResource","resource","checkResult","call","parseEx","waitForIndex","datasetId","initialStatus","builtIndexCheck","dataset","indexStatus","stopWaiting","schemaDefinition","basedOn","Math","min","waitForAccount","accountId","verified","approved","getAccount","account","retry","initialised","errLog","TDXApi","assign","authToken","authenticate","id","secret","base64","encode","access_token","addAccount","wait","username","addAccountApplicationConnection","applicationId","applicationUserId","shortHash","approveAccount","deleteAccount","resetAccount","key","updateAccount","verifyAccount","addTrustedExchange","addResource","addResourceAccess","sourceId","access","rid","aid","src","acc","concat","deleteResource","deleteManyResources","resourceIdList","payload","fileUpload","stream","moveResource","fromParentId","toParentId","rebuildResourceIndex","res","removeResourceAccess","addedBy","by","setResourceImporting","importing","setResourceSchema","schema","setResourceShareMode","shareMode","setResourcePermissiveShare","allowPermissive","permissiveShare","setResourceStore","store","setResourceTextContent","textContent","suspendResourceIndex","truncateResource","updateResource","update","addData","postData","deleteData","deleteDataByQuery","patchData","updateData","upsert","__upsert","updateDataByQuery","deleteDatabotHost","deleteDatabotInstance","instanceId","getDatabotInstance","getDatabotInstanceOutput","processId","getDatabotInstanceStatus","registerDatabotHost","sendDatabotHostCommand","hostId","hostIp","hostPort","startDatabotInstance","databotId","instanceData","abortDatabotInstance","stopDatabotInstance","updateDatabotHostStatus","writeDatabotHostInstanceOutput","output","addZoneConnection","deleteZoneConnection","rollbackCommand","createTDXToken","exchangeTDXToken","token","validateIP","exchangeIP","downloadResource","accountList","getAccounts","getAggregateDataStream","pipeline","ndJSON","getAggregateData","getAuthenticatedAccount","getDataStream","getData","getNDData","getDatasetDataStream","getDatasetData","getDataCount","getDatasetDataCount","getDistinct","noThrow","json","getResourceAccess","getResourceAncestors","getResources","getResourcesWithSchema","schemaId","getTDXToken","tdx","getZone","isInGroup","groupId","lookup","$exists","grp","validateTDXToken"],"mappings":"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","file":"nqm-api-tdx.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"debug\"), require(\"@nqminds/nqm-core-utils\"), require(\"base-64\"), require(\"cross-fetch\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"nqm-api-tdx\", [\"debug\", \"@nqminds/nqm-core-utils\", \"base-64\", \"cross-fetch\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nqm-api-tdx\"] = factory(require(\"debug\"), require(\"@nqminds/nqm-core-utils\"), require(\"base-64\"), require(\"cross-fetch\"));\n\telse\n\t\troot[\"nqm-api-tdx\"] = factory(root[\"debug\"], root[\"@nqminds/nqm-core-utils\"], root[\"base-64\"], root[\"cross-fetch\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 456968094acc21b15b88","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 0\n// module chunks = 0","import crossFetch from \"cross-fetch\";\nimport debug from \"debug\";\n\n// Default 'debug' module output to STDOUT rather than STDERR.\ndebug.log = console.log.bind(console); // eslint-disable-line no-console\n\nconst fetch = (typeof window !== \"undefined\" && window.fetch) ? window.fetch : crossFetch;\nconst FetchRequest = fetch.Request || Request;\nconst FetchHeaders = fetch.Headers || Headers;\nconst pollingRetries = 15;\nconst pollingInterval = 1000;\nconst waitInfinitely = -1;\n\nconst fetchWithDeadline = function(request) {\n  const log = debug(\"nqm-api-tdx:fetchWithDeadline\");\n\n  //\n  // Implement a timeout. We have to do this manually pending a native fix\n  // on fetch() - see https://github.com/whatwg/fetch/issues/20).\n  //\n  return new Promise((resolve, reject) => {\n    let deadline;\n    let rejected = false;\n\n    if (this.config.networkTimeout) {\n      // Reject the promise if the timeout expires.\n      deadline = setTimeout(\n        () => {\n          log(\"deadline expired after %d ms\", this.config.networkTimeout);\n          deadline = 0;\n          rejected = true;\n          reject(new Error(`deadline expired after ${this.config.networkTimeout} ms`));\n        },\n        this.config.networkTimeout\n      );\n    } else {\n      // Never timeout.\n      deadline = 0;\n    }\n\n    const clearTimer = () => {\n      // Cancel pending deadline.\n      if (deadline) {\n        clearTimeout(deadline);\n        deadline = 0;\n      }\n    };\n\n    Promise.resolve(fetch(request))\n      .then((response) => {\n        clearTimer();\n        // Forward response.\n        resolve(response);\n      })\n      .catch((err) => {\n        clearTimer();\n        if (!rejected) {\n          reject(err);\n        } else {\n          log(\"already rejected by timeout, ignoring rejection [%s]\", err.message);\n        }\n      });\n  });\n};\n\nconst TDXApiError = function(code, failure, source, stack) {\n  // Build a string summary for legacy or non-json clients.\n  const stringVersion = JSON.stringify({\n    from: source,\n    failure: JSON.stringify(failure),\n    code,\n  });\n\n  this.name = \"TDXApiError\";\n  this.code = code;\n  this.message = stringVersion;\n  this.failure = failure;\n  this.from = source;\n  this.stack = stack || (new Error()).stack;\n};\n\nTDXApiError.prototype = Object.create(Error.prototype);\nTDXApiError.prototype.constructor = TDXApiError;\n\n/**\n * Formats a TDXApiError object.\n * @param  {string} source - The source of the error, usually a function name.\n * @param  {object} failure - The error details, in the form `{code: xxx, message: yyy}`\n * @param  {string} code - The error code, usually the response status code, e.g. 422, 401 etc.\n */\nconst handleError = function(code, failure, source) {\n  return new TDXApiError(\n    typeof code === \"undefined\" ? \"n/a\" : code,\n    failure,\n    source,\n    (new Error()).stack\n  );\n};\n\nconst buildAuthenticateRequest = function(credentials, ip, ttl) {\n  // We can get a token from any of the TDX services - use the first one we find to build a fetch Request.\n  const uri = `${this.config.tdxServer || this.config.commandServer || this.config.queryServer}/token`;\n  return new FetchRequest(uri, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: new FetchHeaders({\n      \"Authorization\": `Basic ${credentials}`,\n      \"Content-Type\": \"application/json\",\n    }),\n    body: JSON.stringify({grant_type: \"client_credentials\", ip, ttl: ttl || this.config.accessTokenTTL || 3600}),\n  });\n};\n\n/**\n * Builds a Request object for the given command bound to the TDX command service.\n * @param  {string} command - the target TDX command, e.g. \"resource/create\"\n * @param  {object} data - the command payload\n * @param  {string} [contentType=application/json] - the content type\n * @param  {bool} [noSync=false] - send command asynchronously\n */\nconst buildCommandRequest = function(command, data, contentType, async) {\n  const commandMode = async ? \"command\" : \"commandSync\";\n  contentType = contentType || \"application/json\";\n  return new FetchRequest(`${this.config.commandServer}/${commandMode}/${command}`, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: new FetchHeaders({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": contentType,\n    }),\n    body: JSON.stringify(data),\n  });\n};\n\n/**\n * Builds a Request object for the given command bound to the TDX databot service.\n * @param  {string} command - the target TDX command, e.g. \"register\"\n * @param  {object} data - the command payload\n * @param  {string} [contentType=application/json] - the content type\n */\nconst buildDatabotHostRequest = function(command, data) {\n  if (!this.config.databotServer) {\n    throw new Error(\"databotServer URL not defined in API config\");\n  }\n\n  return new FetchRequest(`${this.config.databotServer}/host/${command}`, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: new FetchHeaders({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": \"application/json\",\n    }),\n    body: JSON.stringify(data),\n  });\n};\n\nconst buildFileUploadRequest = function(resourceId, compressed, base64Encoded, file) {\n  let endPoint;\n  if (compressed) {\n    endPoint = \"compressedUpload\";\n  } else if (base64Encoded) {\n    endPoint = \"base64Upload\";\n  } else {\n    endPoint = \"upload\";\n  }\n\n  return new FetchRequest(`${this.config.commandServer}/commandSync/resource/${resourceId}/${endPoint}`, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: new FetchHeaders({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Length\": file.size,\n      \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n    }),\n    body: file,\n  });\n};\n\n/**\n * Builds a Request object for the given query bound to the TDX query engine.\n * @param  {string} endpoint - the query endpoint, e.g. \"resources/DKJF8d8f\"\n * @param  {object} [filter] - a filter expression, e.g. {\"temperature\": {$gt: 18}}\n * @param  {object} [projection] - a projection definition defining what data will be returned, e.g. {sensorId: 1,\n * temperature: 1}\n * @param  {object} [options] - query options, e.g. {limit: 10, sort: {timestamp: -1}}\n */\nconst buildQueryRequest = function(endpoint, filter, projection, options) {\n  filter = filter ? encodeURIComponent(JSON.stringify(filter)) : \"\";\n  projection = projection ? encodeURIComponent(JSON.stringify(projection)) : \"\";\n  options = options ? encodeURIComponent(JSON.stringify(options)) : \"\";\n  let query;\n  if (endpoint.indexOf(\"?\") < 0) {\n    // There is no query portion in the prefix - add one now.\n    query = `${endpoint}?filter=${filter}&proj=${projection}&opts=${options}`;\n  } else {\n    // There is already a query portion, so append the params.\n    query = `${endpoint}&filter=${filter}&proj=${projection}&opts=${options}`;\n  }\n  return new FetchRequest(`${this.config.queryServer}${query}`, {\n    method: \"GET\",\n    mode: \"cors\",\n    headers: new FetchHeaders({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-cache\",\n      \"Pragma\": \"no-cache\",\n      \"Expires\": \"0\",\n    }),\n  });\n};\n\n/**\n * Builds a Request object for the given databot instance query bound to the TDX databot server.\n * @param  {string} endpoint - the databot query endpoint, e.g. \"status/jDduieG7\"\n */\nconst buildDatabotInstanceRequest = function(endpoint) {\n  if (!this.config.databotServer) {\n    throw new Error(\"databotServer URL not defined in API config\");\n  }\n\n  return new FetchRequest(`${this.config.databotServer}/instance/${endpoint}`, {\n    method: \"GET\",\n    mode: \"cors\",\n    headers: new FetchHeaders({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-cache\",\n      \"Pragma\": \"no-cache\",\n      \"Expires\": \"0\",\n    }),\n  });\n};\n\nconst checkResponse = function(source, doNotThrow, response) {\n  const log = debug(\"nqm-api-tdx:checkResponse\");\n\n  // If doNotThrow is omitted default to the config value (which defaults to `false`, i.e. errors will be thrown).\n  if (typeof doNotThrow === \"object\") {\n    response = doNotThrow;\n    doNotThrow = !!this.config.doNotThrow;\n  }\n\n  return response.text()\n    .then((text) => {\n      let jsonResponse;\n\n      try {\n        // Attempt to parse JSON, we could check the content-type header first?\n        jsonResponse = JSON.parse(text);\n      } catch (parseError) {\n        log(\"failed to parse json => assuming non-JSON content type\");\n      }\n\n      if (response.ok) {\n        if (jsonResponse) {\n          // Successfully parsed JSON content.\n          // Check for data write errors. These differ from straight-forward invalid argument or validation\n          // failures. For example, a call to `updateData` might include requests to update 10 documents.\n          // If all 10 documents pass validation, the TDX will go ahead and attempt to write the data and\n          // will continue to apply updates even after one of them fails, i.e. the first 4 updates succeed,\n          // the fifth fails and the rest succeed. In this case `tdxResponse` will contain a `result` object with\n          // details of the failures in an `error` array property and the successes in an `commit` property.\n          if (!doNotThrow && jsonResponse.result && jsonResponse.result.errors && jsonResponse.result.errors.length) {\n            // Reject errors with 409 Conflict status.\n            return Promise.reject(\n              handleError(\n                409,\n                {\n                  code: \"DataError\",\n                  message: jsonResponse.result.errors.join(\", \"),\n                },\n                source\n              )\n            );\n          } else {\n            // Either there are no errors or doNoThrow is set (in which case the callee must check `result.errors`).\n            // Do nothing, fall-through and return JSON response.\n          }\n          return jsonResponse;\n        } else {\n          // Response is OK but isn't in JSON format - this is usually for text content, e.g.new-line delimited JSON,\n          // markdown, html etc...\n          return text;\n        }\n      } else {\n        // Response has a non-200 status => see if the error is in JSON format.\n        if (jsonResponse && jsonResponse.error) {\n          // Build a failure object from the json response.\n          const failure = {code: jsonResponse.error, message: jsonResponse.error_description};\n          return Promise.reject(handleError(response.status, failure, source));\n        } else {\n          // The response body holds the error details.\n          return Promise.reject(handleError(response.status, jsonResponse || text, source));\n        }\n      }\n    });\n};\n\nconst setDefaults = function(config) {\n  const log = debug(\"nqm-api-tdx:setDefaults\");\n\n  // Legacy config support.\n  config.tdxServer = config.tdxServer || config.tdxHost;\n  config.commandServer = config.commandServer || config.commandHost;\n  config.databotServer = config.databotServer || config.databotHost;\n  config.queryServer = config.queryServer || config.queryHost;\n\n  if (config.tdxServer && (!config.queryServer || !config.commandServer)) {\n    const protocolComponents = config.tdxServer.split(\"://\");\n    if (protocolComponents.length !== 2) {\n      throw new Error(`invalid tdxServer in config - no protocol: ${config.tdxServer}`);\n    }\n    const protocol = protocolComponents[0];\n    const hostComponents = protocolComponents[1].split(\".\");\n    if (hostComponents.length < 3) {\n      throw new Error(`invalid tdxServer in config - expected sub.domain.tld: ${config.tdxServer}`);\n    }\n    const hostname = hostComponents.slice(1).join(\".\");\n    config.databotServer = config.databotServer || `${protocol}://databot.${hostname}`;\n    config.commandServer = config.commandServer || `${protocol}://cmd.${hostname}`;\n    config.queryServer = config.queryServer || `${protocol}://q.${hostname}`;\n  }\n\n  // Append version qualifier to query path.\n  config.queryServer = config.queryServer && `${config.queryServer}/v1/`;\n\n  log(\n    \"using hosts: command %s, databot %s, query %s, auth %s\",\n    config.commandServer || \"[n/a]\",\n    config.databotServer || \"[n/a]\",\n    config.queryServer || \"[n/a]\",\n    config.tdxServer || \"[n/a]\",\n  );\n\n  // Default network timeout to 2 mins.\n  config.networkTimeout = config.networkTimeout === undefined ? 120000 : config.networkTimeout;\n};\n\nconst waitForResource = function(resourceId, check, retryCount, maxRetries) {\n  const log = debug(\"nqm-api-tdx:waitForResource\");\n  retryCount = retryCount || 0;\n  return this.getResource(resourceId)\n    .then((resource) => {\n      const checkResult = check(resource, retryCount);\n      if (checkResult instanceof Error) {\n        log(\"waitForResource - check failed with error [%s]\", checkResult.message);\n        return Promise.reject(checkResult);\n      }\n\n      if (!checkResult) {\n        // A negative maxRetries value will retry indefinitely.\n        if (maxRetries >= 0 && retryCount > maxRetries) {\n          log(\"giving up after %d attempts\", retryCount);\n          return Promise.reject(new Error(`gave up waiting for ${resourceId} after ${retryCount} attempts`));\n        }\n\n        // Try again after a delay.\n        log(\"waiting for %d msec\", pollingInterval);\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            log(\"trying again\");\n            resolve(waitForResource.call(this, resourceId, check, retryCount + 1, maxRetries));\n          }, pollingInterval);\n        });\n      } else {\n        return resource;\n      }\n    })\n    .catch((err) => {\n      if (err.name !== \"TDXApiError\") {\n        return Promise.reject(err);\n      } else {\n        try {\n          const parseError = JSON.parse(err.message);\n          const failure = JSON.parse(parseError.failure);\n          // Restify error code had the 'Error' suffix removed post v3.x\n          if (\n            failure.code === \"NotFound\" ||\n            failure.code === \"NotFoundError\" ||\n            failure.code === \"Unauthorized\" ||\n            failure.code === \"UnauthorizedError\"\n          ) {\n            // Ignore resource not found and not authorized errors here, they are probably caused by\n            // waiting for the projections to catch up (esp. in debug environments). By falling through\n            // we will still be limited by the retry count, so won't loop forever.\n            log(\"ignoring error %s\", err.message);\n            return new Promise((resolve) => {\n              setTimeout(() => {\n                resolve(waitForResource.call(this, resourceId, check, retryCount + 1, maxRetries));\n              }, pollingInterval);\n            });\n          } else {\n            // All other errors are fatal.\n            return Promise.reject(err);\n          }\n        } catch (parseEx) {\n          // Failed to parse TDX error - re-throw the original error.\n          log(\"failure: [%s]\", parseEx.message);\n          return Promise.reject(err);\n        }\n      }\n    });\n};\n\nconst waitForIndex = function(datasetId, status, maxRetries) {\n  const log = debug(\"nqm-api-tdx:waitForIndex\");\n\n  // The argument maxRetries is optional.\n  if (typeof maxRetries === \"undefined\") {\n    maxRetries = waitInfinitely;\n  }\n\n  status = status || \"built\";\n\n  let initialStatus = \"\";\n\n  const builtIndexCheck = function(dataset, retryCount) {\n    log(\"builtIndexCheck: %s\", dataset ? dataset.indexStatus : \"no dataset\");\n\n    let stopWaiting;\n\n    if (dataset && dataset.schemaDefinition && dataset.schemaDefinition.basedOn[0] !== \"dataset\") {\n      // No need to wait for the index on non-dataset resources.\n      stopWaiting = true;\n    } else if (dataset && dataset.indexStatus === \"error\") {\n      // Handle \"error\" index status.\n      if (!initialStatus) {\n        // Haven't got an initial status yet, so can't make a judgment as to whether or not the error status\n        // is new, or the index was already in an error state.\n        stopWaiting = false;\n      } else if (initialStatus !== \"error\") {\n        // The index status has transitioned from non-error to error => abort\n        stopWaiting = new Error(\"index entered error status\");\n      } else {\n        // The index status started as an error and is still an error => allow a limited number of retries\n        // irrespective of the requested maxRetries.\n        if (retryCount > Math.min(maxRetries, pollingRetries)) {\n          stopWaiting = new Error(`index still in error status after ${retryCount} retries`);\n        } else {\n          stopWaiting = false;\n        }\n      }\n    } else {\n      stopWaiting = !!dataset && dataset.indexStatus === status;\n    }\n\n    // Cache the first index status we see.\n    if (dataset && !initialStatus) {\n      initialStatus = dataset.indexStatus;\n    }\n\n    return stopWaiting;\n  };\n\n  return waitForResource.call(this, datasetId, builtIndexCheck, 0, maxRetries);\n};\n\nconst waitForAccount = function(accountId, verified, approved, retryCount, maxRetries) {\n  const log = debug(\"nqm-api-tdx:waitForAccount\");\n  retryCount = retryCount || 0;\n  return this.getAccount(accountId)\n    .then((account) => {\n      let retry = false;\n      if (account && account.initialised) {\n        // Account exists and is initialised.\n        if (verified && !account.verified) {\n          // If verification is required, wait for account to be verified.\n          retry = true;\n        } else if (approved && !account.approved) {\n          // If approval is required, wait for account to be approved\n          retry = true;\n        } else {\n          retry = false;\n        }\n      } else {\n        // Account doesn't exist yet, or it exists but hasn't been initialised properly by the TDX.\n        retry = true;\n      }\n\n      if (retry) {\n        // A negative maxRetries value will retry indefinitely.\n        if (maxRetries >= 0 && retryCount > maxRetries) {\n          log(\"giving up after %d attempts\", retryCount);\n          return Promise.reject(new Error(`gave up waiting for account ${accountId} after ${retryCount} attempts`));\n        }\n\n        // Try again after a delay.\n        log(\"waiting for %d msec\", pollingInterval);\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            log(\"trying again\");\n            resolve(waitForAccount.call(this, accountId, verified, approved, retryCount + 1, maxRetries));\n          }, pollingInterval);\n        });\n      } else {\n        return account;\n      }\n    })\n    .catch((err) => {\n      return Promise.reject(err);\n    });\n};\n\nexport {\n  buildAuthenticateRequest,\n  buildCommandRequest,\n  buildDatabotHostRequest,\n  buildDatabotInstanceRequest,\n  buildFileUploadRequest,\n  buildQueryRequest,\n  checkResponse,\n  fetchWithDeadline,\n  handleError,\n  setDefaults,\n  TDXApiError,\n  waitForAccount,\n  waitForIndex,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@nqminds/nqm-core-utils\"\n// module id = 2\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"base-64\"\n// module id = 3\n// module chunks = 0","import base64 from \"base-64\";\nimport debug from \"debug\";\nimport {shortHash} from \"@nqminds/nqm-core-utils\";\nimport {\n  buildAuthenticateRequest,\n  buildCommandRequest,\n  buildDatabotHostRequest,\n  buildDatabotInstanceRequest,\n  buildFileUploadRequest,\n  buildQueryRequest,\n  checkResponse,\n  fetchWithDeadline as fetch,\n  handleError,\n  setDefaults,\n  waitForAccount,\n  waitForIndex,\n} from \"./helpers\";\n\n// Default 'debug' module output to STDOUT rather than STDERR.\ndebug.log = console.log.bind(console); // eslint-disable-line no-console\n\nconst log = debug(\"nqm-api-tdx\");\nconst errLog = debug(\"nqm-api-tdx:error\");\n\n/**\n * @typedef  {Error} TDXApiError\n * The TDX api supplies detailed error information depending on the context of the call.\n * In some instances, e.g. attempting to retrieve a resource that does not exist, the\n * error will be a simple `NotFound` string message. In other cases, e.g. attempting\n * to update 100 documents in a single call, the error will supply details for each\n * document update that failed, such as the primary key of the document and the reason\n * for the failure.\n * @property  {string} name - \"TDXApiError\", indicating the error originated from this library.\n * @property  {number} code - The HTTP response status code, e.g. 401\n * @property  {string} message - *Deprecated* - A string-encoded form of the error, essentially a JSON stringified\n * copy of the entire error object. This is included for legacy reasons and may be removed in a future release.\n * @property  {string} from - Usually the name of the API call that originated the error, e.g. updateData\n * @property  {string} stack - the stack trace\n * @property  {object} failure - an object containing the error information as received from the TDX\n * @property  {string} failure.code - the TDX short error code, e.g. NotFound, PermissionDenied etc.\n * @property  {string|array} failure.message - details of the failure. For simple cases this will be a string,\n * e.g. `resource not found: KDiEI3k_`. In other instance this will be an array of objects describing each error. See\n * the example below showing a failed attempt to update 2 documents. One of the errors is a simple document not found\n * and the other is a validation error giving details of the exact path in the document that failed validation.\n * @example <caption>`failure` for simple query error</caption>\n * failure: {\n *  code: \"NotFound\",\n *  message: \"resource not found: KDiEI3k_\"\n * }\n * @example <caption>`failure` for complex data update error</caption>\n * failure: {\n *  code: \"BadRequestError\",\n *  message: [\n *    {\n *      key: {id: \"foo\"},\n *      error: {\n *        message: \"document not found matching key 'foo'\"\n *      }\n *    },\n *    {\n *      key: {id: \"bar\"},\n *      error: {\n *        message: \"'hello' is not a valid enum value\",\n *        name: \"ValidatorError\",\n *        kind: \"enum\"\n *        path: \"value\"\n *      }\n *    }\n *  ]\n * }\n */\n\n/**\n * @typedef  {object} CommandResult\n * @property  {string} commandId - The auto-generated unique id of the command.\n * @property  {object|string} response - The response of the command. If a command is sent asynchronously, this will\n * simply be the string `\"ack\"`. In synchronous mode, this will usually be an object consisting of the primary key\n * of the data that was affected by the command.\n * @property  {object} result - Contains success flag and detailed error information when available.\n * @property  {array} result.errors - Will contain error information when appropriate.\n * @property  {array} result.ok - Contains details of each successfully commited document.\n */\n\n/**\n * @typedef  {object} DatasetData\n * @property  {object} metaData - The dataset metadata (see `nqmMeta` option in `getDatasetData`).\n * @property  {string} metaDataUrl - The URL to the dataset metadata (see `nqmMeta` option in `getDatasetData`.\n * @property  {object[]} data - The dataset documents.\n */\n\n/**\n * @typedef  {object} Resource\n * @property  {string} description\n * @property  {string} id\n * @property  {string} name\n * @property  {string[]} parents\n * @property  {object} schemaDefinition\n * @property  {string[]} tags\n */\n\n/**\n * @typedef  {object} ResourceAccess\n * @property  {string} aid - account id that is the subject of this access\n * @property  {string} by - comma-delimited list of attribution for this access\n * @property  {string} rid - resource id to which this access refers\n * @property  {string} grp - indicates the share mode (user groups only)\n * @property  {string} own - account that owns the resource\n * @property  {string[]} par - the parent(s) of the resource\n * @property  {string} typ - the base type of the resource\n * @property  {string[]} r - array of resource ids that are the source of read access (e.g. parent)\n * @property  {string[]} w - array of resource ids that are the source of write access\n */\n\n/**\n * @typedef  {object} Zone\n * @property  {string} accountType\n * @property  {string} displayName\n * @property  {string} username\n */\n\nexport class TDXApi {\n  /**\n   * Create a TDXApi instance\n   * @param  {object} config - the TDX configuration for the remote TDX\n   * @param  {string} [config.tdxServer] - the URL of the TDX auth server, e.g. https://tdx.nqminds.com. Usually this\n   * is the only host parameter needed, as long as the target TDX conforms to the standard service naming conventions\n   * e.g. https://[service].[tdx-domain].com. In this case the individual service hosts can be derived from the tdxHost\n   * name. Optionally, you can specify each individual service host (see below). Note you only need to provide the host\n   * for services you intend to use. For example, if you only need query services, just provide the query host.\n   * @param  {string} [config.commandServer] - the URL of the TDX command service, e.g. https://cmd.nqminds.com\n   * @param  {string} [config.queryServer] - the URL of the TDX query service, e.g. https://q.nqminds.com\n   * @param  {string} [config.databotServer] - the URL of the TDX databot service, e.g. https://databot.nqminds.com\n   * @param  {string} [config.accessToken] - an access token that will be used to authorise commands and queries.\n   * Alternatively you can use the authenticate method to acquire a token.\n   * @param  {number} [config.accessTokenTTL] - the TTL in seconds of the access token created when authenticating.\n   * @param  {bool} [config.doNotThrow] - set to prevent throwing response errors. They will be returned in the\n   * {@link CommandResult} object. This was set by default prior to 0.5.x\n   * @example <caption>standard usage</caption>\n   * import TDXApi from \"nqm-api-tdx\";\n   * const api = new TDXApi({tdxServer: \"https://tdx.acme.com\"});\n   */\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.accessToken = config.accessToken || config.authToken || \"\";\n    setDefaults(this.config);\n  }\n\n  /**\n   * Authenticates with the TDX, acquiring an authorisation token.\n   * @param  {string} id - the account id, or a pre-formed credentials string, e.g. \"DKJG8dfg:letmein\"\n   * @param  {string} secret - the account secret\n   * @param  {number} [ttl=3600] - the Time-To-Live of the token in seconds, default is 1 hour. Will default to\n   * config.accessTokenTTL if not given here.\n   * @return  {string} The access token.\n   * @exception Will throw if credentials are invalid or there is a network error contacting the TDX.\n   * @example <caption>authenticate using a share key and secret</caption>\n   * tdxApi.authenticate(\"DKJG8dfg\", \"letmein\");\n   * @example <caption>authenticate using custom ttl of 2 hours</caption>\n   * tdxApi.authenticate(\"DKJG8dfg\", \"letmein\", 7200);\n   */\n  authenticate(id, secret, ttl, ip) {\n    let credentials;\n\n    if (typeof secret !== \"string\") {\n      // Assume the first argument is a pre-formed credentials string\n      credentials = id;\n      ip = ttl;\n      ttl = secret;\n    } else {\n      // uri-encode the username and concatenate with secret.\n      credentials = `${encodeURIComponent(id)}:${secret}`;\n    }\n\n    // Authorization headers must be base-64 encoded.\n    credentials = base64.encode(credentials);\n\n    const request = buildAuthenticateRequest.call(this, credentials, ip, ttl);\n    return fetch.call(this, request)\n      .then(checkResponse.bind(this, \"authenticate\"))\n      .then((result) => {\n        log(result);\n        this.accessToken = result.access_token;\n        return this.accessToken;\n      })\n      .catch((err) => {\n        errLog(`authenticate error: ${err.message}`);\n        return Promise.reject(err);\n      });\n  }\n\n  /*\n   *\n   *  ACCOUNT COMMANDS\n   *\n   */\n\n  /**\n   * Adds an account to the TDX. An account can be an e-mail based user account, a share key (token) account,\n   * a databot host, an application, or an account-set (user group).\n   * @param  {object} options - new account options\n   * @param  {string} options.accountType - the type of account, one of [\"user\", \"token\"]\n   * @param  {bool} [options.approved] - account is pre-approved (reserved for system use only)\n   * @param  {string} [options.authService] - the authentication type, one of [\"local\", \"oauth:google\",\n   * \"oauth:github\"]. Required for user-based accounts. Ignored for non-user accounts.\n   * @param  {string} [options.displayName] - the human-friendly display name of the account, e.g. \"Toby's share key\"\n   * @param  {number} [options.expires] - a timestamp at which the account expires and will no longer be granted a\n   * token\n   * @param  {string} [options.key] - the account secret. Required for all but oauth-based account types.\n   * @param  {string} [options.owner] - the owner of the account.\n   * @param  {bool} [options.scratchAccess] - indicates this account can create resources in the owners scratch\n   * folder. Ignored for all accounts except share key (token) accounts. Is useful for databots that need to create\n   * intermediate or temporary resources without specifying a parent resource - if no parent resource is given\n   * when a resource is created and scratch access is enabled, the resource will be created in the owner's scratch\n   * folder.\n   * @param  {object} [options.settings] - free-form JSON object for user data.\n   * @param  {string} [options.username] - the username of the new account. Required for user-based accounts, and\n   * should be the account e-mail address. Can be omitted for non-user accounts, and will be auto-generated.\n   * @param  {bool} [options.verified] - account is pre-verified (reserved for system use only)\n   * @param  {string[]} [options.whitelist] - a list of IP addresses. Tokens will only be granted if the requesting\n   * IP address is in this list\n   * @param  {bool} [wait=false] - flag indicating this method will wait for the account to be fully created before\n   * returning.\n   * @return  {CommandResult}\n   */\n  addAccount(options, wait) {\n    const request = buildCommandRequest.call(this, \"account/create\", options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"addAccount\"))\n      .then((result) => {\n        if (wait) {\n          return waitForAccount.call(this, options.username, options.verified, options.approved)\n            .then(() => {\n              return result;\n            });\n        } else {\n          return result;\n        }\n      });\n  }\n\n  /**\n   * Adds the application/user connection resource. The authenticated token must belong to the application.\n   * @param {string} accountId - the account id\n   * @param {string} applicationId - the application id\n   * @param {bool} [wait=true] - whether or not to wait for the projection to catch up.\n   */\n  addAccountApplicationConnection(accountId, applicationId, wait = true) {\n    const request = buildCommandRequest.call(this, \"applicationConnection/create\", {accountId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addAccountApplicationConnection: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"addAccountApplicationConnection\"))\n      .then((result) => {\n        if (wait) {\n          const applicationUserId = shortHash(`${applicationId}-${accountId}`);\n          return waitForIndex.call(this, applicationUserId)\n            .then(() => {\n              return result;\n            });\n        } else {\n          return result;\n        }\n      });\n  }\n\n  /**\n   * Set account approved status. Reserved for system use.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {bool} approved - account approved status\n   */\n  approveAccount(username, approved) {\n    const request = buildCommandRequest.call(this, \"account/approve\", {username, approved});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.approveAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"approveAccount\"));\n  }\n\n  /**\n   * Delete an account\n   * @param  {string} username - the full TDX identity of the account to delete.\n   */\n  deleteAccount(username) {\n    const request = buildCommandRequest.call(this, \"account/delete\", {username});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"deleteAccount\"));\n  }\n\n  /**\n   * Change account secret.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {string} key - the new secret\n   */\n  resetAccount(username, key) {\n    const request = buildCommandRequest.call(this, \"account/reset\", {username, key});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.resetAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"resetAccount\"));\n  }\n\n  /**\n   * Updates account details. All update properties are optional. See createAccount for full details of\n   * each option.\n   * @param  {string} username - the full TDX identity of the account to update.\n   * @param  {object} options - the update options\n   * @param  {string} [options.displayName]\n   * @param  {string} [options.key]\n   * @param  {bool} [options.scratchAccess]\n   * @param  {object} [options.settings]\n   * @param  {string[]} [options.whitelist]\n   */\n  updateAccount(username, options) {\n    const request = buildCommandRequest.call(this, \"account/update\", Object.assign({username}, options));\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"addAccount\"));\n  }\n\n  /**\n   * Set account verified status. Reserved for system use.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {bool} approved - account verified status\n   */\n  verifyAccount(username, verified) {\n    const request = buildCommandRequest.call(this, \"account/verify\", {username, verified});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.verifyAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"verifyAccount\"));\n  }\n\n  /*\n   *\n   *  RESOURCE COMMANDS\n   *\n   */\n\n  /**\n   * Adds a data exchange to the list of trusted exchanges known to the current TDX.\n   * @param  {object} options\n   * @param  {string} options.owner - the account on this TDX to which the trust relates,\n   * e.g. `bob@mail.com/tdx.acme.com`\n   * @param  {string} options.targetServer - the TDX to be trusted, e.g. `tdx.nqminds.com`\n   * @param  {string} options.targetOwner - the account on the target TDX that is trusted,\n   * e.g. `alice@mail.com/tdx.nqminds.com`.\n   */\n  addTrustedExchange(options) {\n    const request = buildCommandRequest.call(this, \"trustedConnection/create\", options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addTrustedExchange: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"addTrustedExchange\"));\n  }\n\n  /**\n   * Adds a resource to the TDX.\n   * @param  {object} options - details of the resource to be added.\n   * @param  {string} [options.basedOnSchema=dataset] - the id of the schema on which this resource will be based.\n   * @param  {object} [options.derived] - definition of derived filter, implying this resource is a view on an existing\n   * dataset.\n   * @param  {object} [options.derived.filter] - the (read) filter to apply, in mongodb query format,\n   * e.g. `{\"temperature\": {\"$gt\": 15}}` will mean that only data with a temperature value greater than 15 will be\n   * available in this view. The filter can be any arbitrarily complex mongodb query. Use the placeholder\n   * `\"@@_identity_@@\"` to indicate that the identity of the currently authenticated user should be substituted.\n   * For example, if the user `bob@acme.com/tdx.acme.com` is currently authenticated, a filter of `{\"username\":\n   *  \"@@_identity_@@\"}` will resolve at runtime to `{\"username\": \"bob@acme.com/tdx.acme.com\"}`.\n   * @param  {object} [options.derived.projection] - the (read) projection to apply, in mongodb projection format,\n   * e.g. `{\"timestamp\": 1, \"temperature\": 1}` implies only the 'timestamp' and 'temperature' properties will be\n   * returned.\n   * @param  {string} [options.derived.source] - the id of the source dataset on which to apply the filters and\n   * projections.\n   * @param  {object} [options.derived.writeFilter] - the write filter to apply, in mongodb query format. This\n   * controls what data can be written to the underlying source dataset. For example, a write filter of\n   * `{\"temperature\": {\"$lt\": 40}}` means that attempts to write a temperature value greater than or equal to `40`\n   * will fail. The filter can be any arbitrarily complex mongodb query.\n   * @param  {object} [options.derived.writeProjection] - the write projection to apply, in mongodb projection format.\n   * This controls what properties can be written to the underlying dataset. For example, a write projection of\n   * `{\"temperature\": 1}` means that only the temperature field can be written, and attempts to write data to other\n   * properties will fail. To allow a view to create new data in the underlying dataset, the primary key fields\n   * must be included in the write projection.\n   * @param  {string} [options.description] - a description for the resource.\n   * @param  {string} [options.id] - the requested ID of the new resource. Must be unique. Will be auto-generated if\n   * omitted (recommended).\n   * @param  {string} options.name - the name of the resource. Must be unique in the parent folder.\n   * @param  {object} [options.meta] - a free-form object for storing metadata associated with this resource.\n   * @param  {string} [options.parentId] - the id of the parent resource. If omitted, will default to the appropriate\n   * root folder based on the type of resource being created.\n   * @param  {string} [options.provenance] - a description of the provenance of the resource. Markdown format is\n   * supported.\n   * @param  {string} [options.queryProxy] - a url or IP address that will handle all queries to this resource\n   * @param  {object} [options.schema] - optional schema definition.\n   * @param  {string} [options.shareMode] - the share mode assigned to the new resource. One of [`\"pw\"`, `\"pr\"`,\n   * `\"tr\"`], corresponding to \"public read/write\", \"public read/trusted write\", \"trusted only\".\n   * @param  {string[]} [options.tags] - a list of tags to associate with the resource.\n   * @param  {string} [options.textContent] - the text content for the resource. Only applicable to text content based\n   * resources.\n   * @param  {bool|string} [wait=false] - indicates if the call should wait for the index to be built before it\n   * returns. You can pass a string here to indicate the status you want to wait for, default is 'built'.\n   * @example <caption>usage</caption>\n   * // Creates a dataset resource in the authenticated users' scratch folder. The dataset stores key/value pairs\n   * // where the `key` property is the primary key and the `value` property can take any JSON value.\n   * tdxApi.addResource({\n   *   name: \"resource #1\",\n   *   schema: {\n   *     dataSchema: {\n   *       key: \"string\",\n   *       value: {}\n   *     },\n   *     uniqueIndex: {key: 1}\n   *   }\n   * })\n   */\n  addResource(options, wait) {\n    const request = buildCommandRequest.call(this, \"resource/create\", options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"addResource\"))\n      .then((result) => {\n        if (wait) {\n          return waitForIndex.call(this, result.response.id, wait === true ? \"\" : wait)\n            .then(() => {\n              return result;\n            });\n        } else {\n          return result;\n        }\n      });\n  }\n\n  /**\n   * Adds read and/or write permission for an account to access a resource. Permission is required\n   * equivalent to that which is being added, e.g. adding write permission requires existing\n   * write access.\n   * @param  {string} resourceId - The resource id\n   * @param  {string} accountId - The account id to assign permission to\n   * @param  {string} sourceId - The id of the resource acting as the source of the access. This\n   * is usually the same as the target `resourceId`, but can also be a parent resource. For example,\n   * if write access is granted with the sourceId set to be a parent, then if the permission is\n   * revoked from the parent resource it will also be revoked from this resource.\n   * @param  {string[]} access - The access, one or more of [`\"r\"`, `\"w\"`]. Can be an array or an individual\n   * string.\n   * @example <caption>add access to an account</caption>\n   * tdxApi.addResourceAccess(myResourceId, \"bob@acme.com/tdx.acme.com\", myResourceId, [\"r\"]);\n   */\n  addResourceAccess(resourceId, accountId, sourceId, access) {\n    const request = buildCommandRequest.call(this, \"resourceAccess/add\", {\n      rid: resourceId,\n      aid: accountId,\n      src: sourceId,\n      acc: [].concat(access),\n    });\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addResourceAccess: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"addResourceAccess\"));\n  }\n\n  /**\n   * Permanently deletes a resource.\n   * @param  {string} resourceId - the id of the resource to delete. Requires write permission\n   * to the resource.\n   */\n  deleteResource(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/delete\", {id: resourceId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"deleteResource\"));\n  }\n\n  /**\n   * Permanently deletes a list of resources.\n   * Will fail **all** deletes if any of the permission checks fail.\n   * @param  {Resource[]} resourceList - The list of resources to delete. Note only the `id` property of each\n   * resource is required.\n   * @return  {CommandResult}\n   */\n  deleteManyResources(resourceIdList) {\n    const request = buildCommandRequest.call(this, \"resource/deleteMany\", {payload: resourceIdList});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteManyResources: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"deleteManyResources\"));\n  }\n\n  /**\n   * Upload a file to a resource.\n   * @param  {string} resourceId - The id of the destination resource.\n   * @param  {object} file - The file to upload, obtained from an `<input type=\"file\">` element.\n   * @param  {bool} [stream=false] - Flag indicating whether the call should return a stream allowing\n   * callees to monitor progress.\n   * @param  {bool} [compressed=false] - Flag indicating the file should be decompressed after upload. ZIP format\n   * only.\n   * @param  {bool} [base64Encoded=false] = Flag indicating the file should be decoded from base64 after upload.\n   */\n  fileUpload(resourceId, file, stream, compressed = false, base64Encoded = false) {\n    const request = buildFileUploadRequest.call(this, resourceId, compressed, base64Encoded, file);\n    const response = fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.fileUpload: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      });\n\n    if (stream) {\n      return response;\n    } else {\n      return response\n        .then((response) => {\n          return [response, response.text()];\n        })\n        .then(([response, text]) => {\n          if (response.ok) {\n            return Promise.resolve(text);\n          } else {\n            return Promise.reject(handleError(response.status, {code: \"failure\", message: text}, \"fileUpload\"));\n          }\n        });\n    }\n  }\n\n  /**\n   * Move resource from one folder to another. Requires write permission on the resource, the\n   * source parent and the target parent resources.\n   * @param  {string} id - the id of the resource to move.\n   * @param  {string} fromParentId - the current parent resource to move from.\n   * @param  {string} toParentId - the target folder resource to move to.\n   */\n  moveResource(id, fromParentId, toParentId) {\n    const request = buildCommandRequest.call(this, \"resource/move\", {id, fromParentId, toParentId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.moveResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"moveResource\"));\n  }\n\n  /**\n   * Resets the resource index. This involves deleting existing indexes and rebuilding them. May take\n   * a while depending on the size of any associated dataset and the number and complexity of indexes.\n   * @param  {string} resourceId - the id of the resource, requires write permission.\n   */\n  rebuildResourceIndex(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/index/rebuild\", {id: resourceId});\n    let result;\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.rebuildResourceIndex: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"rebuildIndex\"))\n      .then((res) => {\n        result = res;\n        return waitForIndex.call(this, result.response.id, \"built\");\n      })\n      .then(() => {\n        return result;\n      });\n  }\n\n  /**\n   * Removes access for an account to a resource. Permission is required\n   * equivalent to that which is being added, e.g. adding write permission requires existing\n   * write access.\n   * @param  {string} resourceId - The resource id.\n   * @param  {string} accountId - The account id to remove access from.\n   * @param  {string} addedBy - The account id that originally added the access, probably your\n   * account id.\n   * @param  {string} sourceId - The source of the access, usually the resource itself.\n   * @param  {string[]} access - The access, one or more of [`\"r\"`, `\"w\"`].\n   */\n  removeResourceAccess(resourceId, accountId, addedBy, sourceId, access) {\n    const request = buildCommandRequest.call(this, \"resourceAccess/delete\", {\n      rid: resourceId,\n      aid: accountId,\n      by: addedBy,\n      src: sourceId,\n      acc: access,\n    });\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.removeResourceAccess: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"removeResourceAccess\"));\n  }\n\n  /**\n   * Set the resource import flag.\n   * @param  {string} resourceId - The id of the dataset-based resource.\n   * @param  {boolean} importing - Indicates the state of the import flag.\n   * @return  {CommandResult}\n   */\n  setResourceImporting(resourceId, importing) {\n    const request = buildCommandRequest.call(this, \"resource/importing\", {id: resourceId, importing});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceImporting: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"setResourceImporting\"));\n  }\n\n  /**\n   * Set the resource schema.\n   * @param  {string} resourceId - The id of the dataset-based resource.\n   * @param  {object} schema - The new schema definition. TODO - document\n   * @return  {CommandResult}\n   */\n  setResourceSchema(resourceId, schema) {\n    const request = buildCommandRequest.call(this, \"resource/schema/set\", {id: resourceId, schema});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceSchema: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"setResourceSchema\"));\n  }\n\n  /**\n   * Set the share mode for a resource.\n   * @param  {string} resourceId - The resource id.\n   * @param  {string} shareMode - The share mode to set, one or [`\"pw\"`, `\"pr\"`, `\"tr\"`] corresponding to\n   * 'public read/write', 'public read, trusted write', 'trusted only'.\n   */\n  setResourceShareMode(resourceId, shareMode) {\n    const request = buildCommandRequest.call(this, \"resource/setShareMode\", {id: resourceId, shareMode});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceShareMode: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"setResourceShareMode\"));\n  }\n\n  /**\n   * Sets the permissive share mode of the resource. Permissive share allows anybody with acces to the resource\n   * to share it with others. If a resource is not in permissive share mode, only the resource owner\n   * can share it with others.\n   * @param  {string} resourceId - The resource id.\n   * @param  {bool} allowPermissive - The required permissive share mode.\n   */\n  setResourcePermissiveShare(resourceId, allowPermissive) {\n    const request = buildCommandRequest.call(this, \"resource/setPermissiveShare\", {\n      id: resourceId,\n      permissiveShare: allowPermissive ? \"r\" : \"\",\n    });\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourcePermissiveShare: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"setResourcePermissiveShare\"));\n  }\n\n  /**\n   * Sets the dataset store of the resource. Reserved for system use.\n   * @param  {string} resourceId - The resource id.\n   * @param  {string} store - The name of the store.\n   */\n  setResourceStore(resourceId, store) {\n    const request = buildCommandRequest.call(this, \"resource/store/set\", {\n      id: resourceId,\n      store,\n    });\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceStore: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"setResourceStore\"));\n  }\n\n  /**\n   * Set the text for a text-content based resource.\n   * @param  {string} resourceId - The resource id.\n   * @param  {string} textContent - The text content to set.\n   * @example <caption>usage</caption>\n   * // Sets the text content for a text-html resource.\n   * tdxApi.setResourceTextContent(\n   *   \"HyeqJgVdJ7\",\n   *   \"<html><body><p>Hello World</p></body></html>\"\n   * );\n   */\n  setResourceTextContent(resourceId, textContent) {\n    const request = buildCommandRequest.call(this, \"resource/textContent/set\", {id: resourceId, textContent});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceTextContent: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"setResourceTextContent\"));\n  }\n\n  /**\n   * Suspends the resource index. This involves deleting any existing indexes. Requires write permission. When\n   * a resource index is in `suspended` status, it is not possible to run any queries or updates against\n   * the resource.\n   * @param  {string} resourceId - the id of the resource. Requires write permission.\n   */\n  suspendResourceIndex(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/index/suspend\", {id: resourceId});\n    let result;\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.suspendResourceIndex: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"suspendIndex\"))\n      .then((res) => {\n        result = res;\n        return waitForIndex.call(this, result.response.id, \"suspended\");\n      })\n      .then(() => {\n        return result;\n      });\n  }\n\n  /**\n   * Removes all data from the resource. Applicable to dataset-based resources only. This can not be\n   * undone.\n   * @param  {string} resourceId - The resource id to truncate.\n   */\n  truncateResource(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/truncate\", {id: resourceId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.truncateResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"truncateResource\"));\n  }\n\n  /**\n   * Modify one or more of the meta data associated with the resource.\n   * @param  {string} resourceId - id of the resource to update\n   * @param  {object} update - object containing the properties to update. Can be one or more of those\n   * listed below. See the {@link TDXApi#addResource} method for semantics and syntax of each property.\n   * @param  {string} [update.derived]\n   * @param  {string} [update.description]\n   * @param  {object} [update.meta]\n   * @param  {string} [update.name]\n   * @param  {bool} [update.overwrite] - set this flag to overwrite existing data rather than merging (default). This\n   * currently only applies to the `meta` property.\n   * @param  {string} [update.provenance]\n   * @param  {string} [update.queryProxy]\n   * @param  {array} [update.tags]\n   * @param  {string} [update.textContent] see also {@link TDXApi#setResourceTextContent}\n   */\n  updateResource(resourceId, update) {\n    const request = buildCommandRequest.call(this, \"resource/update\", Object.assign({id: resourceId}, update));\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"updateResource\"));\n  }\n\n  /*\n   *\n   *  RESOURCE DATA COMMANDS\n   *\n   */\n\n  /**\n   * Add data to a dataset resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to add data to.\n   * @param  {object|array} data - The data to add. Must conform to the schema defined by the resource metadata.\n   * @param  {bool} [doNotThrow=false] - set to override default error handling. See {@link TDXApi}.\n   * Supports creating an individual document or many documents.\n   * @example <caption>create an individual document</caption>\n   * // Assumes the dataset primary key is 'lsoa'\n   * tdxApi.addData(myDatasetId, {lsoa: \"E0000001\", count: 398});\n   * @example <caption>create multiple documents</caption>\n   * tdxApi.addData(myDatasetId, [\n   *  {lsoa: \"E0000001\", count: 398},\n   *  {lsoa: \"E0000002\", count: 1775},\n   *  {lsoa: \"E0000005\", count: 4533},\n   * ]);\n   */\n  addData(datasetId, data, doNotThrow) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/createMany\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"addData\", doNotThrow));\n  }\n\n  /**\n   * Deletes data from a dataset-based resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to delete data from.\n   * @param  {object|array} data - The primary key data to delete.\n   * @param  {bool} [doNotThrow=false] - set to override default error handling. See {@link TDXApi}.\n   */\n  deleteData(datasetId, data, doNotThrow) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/deleteMany\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"deleteData\", doNotThrow));\n  }\n\n  /**\n   * Deletes data from a dataset-based resource using a query to specify the documents to be deleted.\n   * @param  {string} datasetId - The id of the dataset-based resource to delete data from.\n   * @param  {object} query - The query that specifies the data to delete. All documents matching the\n   * query will be deleted.\n   * @param  {bool} [doNotThrow=false] - set to override default error handling. See {@link TDXApi}.\n   * @example\n   * // Delete all documents with English lsoa.\n   * tdxApi.deleteDataByQuery(myDatasetId, {lsoa: {$regex: \"E*\"}});\n   */\n  deleteDataByQuery(datasetId, query, doNotThrow) {\n    const postData = {\n      datasetId,\n      query: JSON.stringify(query),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/deleteQuery\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteDataByQuery: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"deleteDataByQuery\", doNotThrow));\n  }\n\n  /**\n   * Patches data in a dataset resource. Uses the [JSON patch](https://tools.ietf.org/html/rfc6902) format,\n   * which involves defining the primary key data followed by a flexible update specification.\n   * @param  {string} datasetId - The id of the dataset-based resource to update.\n   * @param  {object} data - The patch definition.\n   * @param  {object|array} data.__update - An array of JSON patch specifications.\n   * @param  {bool} [doNotThrow=false] - set to override default error handling. See {@link TDXApi}.\n   * @example <caption>patch a single value in a single document</caption>\n   * tdxApi.patchData(myDatasetId, {lsoa: \"E000001\", __update: [{path: \"/count\", op: \"replace\", value: 948}]});\n   * @example <caption>patch a more than one value in a single document</caption>\n   * tdxApi.patchData(myDatasetId, {lsoa: \"E000001\", __update: [\n   *   {path: \"/count\", op: \"replace\", value: 948}\n   *   {path: \"/modified\", op: \"add\", value: Date.now()}\n   * ]});\n   */\n  patchData(datasetId, data, doNotThrow) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/upsertMany\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.patchData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"patchData\", doNotThrow));\n  }\n\n  /**\n   * Updates data in a dataset resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to update.\n   * @param  {object|array} data - The data to update. Must conform to the schema defined by the resource metadata.\n   * Supports updating individual or multiple documents.\n   * @param  {bool} [upsert=false] - Indicates the data should be created if no document is found matching the\n   * @param  {bool} [doNotThrow=false] - set to override default error handling. See {@link TDXApi}.\n   * primary key.\n   * @return {CommandResult} - Use the result property to check for errors.\n   * @example <caption>update an existing document</caption>\n   * tdxApi.updateData(myDatasetId, {lsoa: \"E000001\", count: 488});\n   * @example <caption>upsert a document</caption>\n   * // Will create a document if no data exists matching key 'lsoa': \"E000004\"\n   * tdxApi.updateData(myDatasetId, {lsoa: \"E000004\", count: 288}, true);\n   */\n  updateData(datasetId, data, upsert, doNotThrow) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n      __upsert: !!upsert,\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/updateMany\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"updateData\", doNotThrow));\n  }\n\n  /**\n   * Updates data in a dataset-based resource using a query to specify the documents to be updated.\n   * @param  {string} datasetId - The id of the dataset-based resource to update data in.\n   * @param  {object} query - The query that specifies the data to update. All documents matching the\n   * @param  {bool} [doNotThrow=false] - set to override default error handling. See {@link TDXApi}.\n   * query will be updated.\n   * @example\n   * // Update all documents with English lsoa, setting `count` to 1000.\n   * tdxApi.updateDataByQuery(myDatasetId, {lsoa: {$regex: \"E*\"}}, {count: 1000});\n   */\n  updateDataByQuery(datasetId, query, update, doNotThrow) {\n    const postData = {\n      datasetId,\n      query: JSON.stringify(query),\n      update,\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/updateQuery\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateDataByQuery: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"updateDataByQuery\", doNotThrow));\n  }\n\n  /*\n   *\n   *  DATABOT COMMANDS\n   *\n   */\n\n  /**\n   * Deletes one or more hosts, depending on the given parameters. E.g. if just a `hostId` is given, all hosts\n   * will be deleted with that id. If an ip address is also given, all hosts with the id on that ip address will\n   * be deleted and so on. Note that hosts can only be deleted if they are in the `offline` status.\n   * @param  {object} payload - The definition of the host(s) to delete. Can be an array of objects or a single object\n   * @param  {string} payload.hostId - The id of the hosts to be deleted.\n   * @param  {string} [payload.hostIp] - The optional ip of the hosts to be deleted.\n   * @param  {number} [payload.hostPort] - The optional port number of the host to be deleted.\n   */\n  deleteDatabotHost(payload) {\n    const postData = {\n      payload,\n    };\n    const request = buildCommandRequest.call(this, \"databot/host/delete\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteDatabotHost: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"deleteDatabotHost\"));\n  }\n\n  /**\n   * Deletes a databot instance and all output/debug data associated with it.\n   * @param  {string[]} instanceId - The id(s) of the instances to delete. Can be an array of instance ids or an\n   * individual string id\n   */\n  deleteDatabotInstance(instanceId) {\n    const postData = {\n      instanceId: [].concat(instanceId),\n    };\n    const request = buildCommandRequest.call(this, \"databot/deleteInstance\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"deleteDatabotInstance\"));\n  }\n\n  /**\n   * Gets databot instance data for the given instance id.\n   * @param  {string} instanceId - The id of the instance to retrieve.\n   */\n  getDatabotInstance(instanceId) {\n    const request = buildDatabotInstanceRequest.call(this, instanceId);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getDatabotInstance\"));\n  }\n\n  /**\n   * Get databot instance output.\n   * @param  {string} instanceId - The instance id to retrieve output for.\n   * @param  {string} [processId] - Optional process id. If omitted, output for all instance processes will be returned.\n   */\n  getDatabotInstanceOutput(instanceId, processId) {\n    const request = buildDatabotInstanceRequest.call(this, `output/${instanceId}/${processId || \"\"}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatabotInstanceOutput: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getDatabotInstanceOutput\"));\n  }\n\n  /**\n   * Get databot instance status.\n   * @param  {string} instanceId - The id of the databot instance for which status is retrieved.\n   */\n  getDatabotInstanceStatus(instanceId) {\n    const request = buildDatabotInstanceRequest.call(this, `status/${instanceId}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatabotInstanceStatus: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getDatabotInstanceStatus\"));\n  }\n\n  /**\n   * Registers a databot host with the TDX. Once registered, a host is eligible to receive commands from the TDX.\n   * @param  {object} payload - The databot host identifier payload.\n   * @param  {number} payload.port - the port number the host is listening on.\n   * @param  {string} payload.version - the databot host software version.\n   * @param  {string} payload.hostStatus - the current status of the host, \"idle\" or \"busy\".\n   * @param  {string} [payload.ip] - optional ip address of the host. Usually the TDX can deduce this from the incoming\n   * request.\n   * @example <caption>register a databot host</caption>\n   * tdxApi.registerDatabotHost({version: \"0.3.11\", port: 2312, hostStatus: \"idle\"});\n   */\n  registerDatabotHost(payload) {\n    const request = buildDatabotHostRequest.call(this, \"register\", payload);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.registerDatabotHost: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"registerDatabotHost\"));\n  }\n\n  /**\n   * Sends a command to a databot host. Reserved for system use.\n   * @param  {string} command - The command to send. Must be one of [\"stopHost\", \"updateHost\", \"runInstance\",\n   * \"stopInstance\", \"clearInstance\"]\n   * @param  {string} hostId - The id of the host.\n   * @param  {string} [hostIp] - The ip address of the host. If omitted, the command will be sent to all\n   * host ip addresses.\n   * @param  {number} [hostPort] - The port number of the host. If omitted, the command will be sent to\n   * all host ports.\n   * @param  {object} [payload] - The command payload.\n   */\n  sendDatabotHostCommand(command, hostId, hostIp, hostPort, payload) {\n    const postData = {\n      hostId,\n      hostIp,\n      hostPort,\n      command,\n      payload,\n    };\n    const request = buildCommandRequest.call(this, \"databot/host/command\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.sendDatabotHostCommand: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"sendDatabotHostCommand\"));\n  }\n\n  /**\n   * Starts a databot instance.\n   * @param  {string} databotId - The id of the databot definition to start.\n   * @param  {object} payload - The instance input and parameters.\n   * @param  {number} [payload.authTokenTTL] - The time-to-live to use when creating the auth token, in seconds.\n   * Will default to the TDX-configured default if not given (usually 1 hour).\n   * @param  {number} [payload.chunks=1] - The number of processes to instantiate. Each will be given the same input\n   * data, with only the chunk number varying.\n   * @param  {bool} [payload.debugMode=false] - Flag indicating this instance should be run in debug mode, meaning\n   * all debug output will be captured and stored on the TDX. n.b. setting this will also restrict the hosts available\n   * to run the instance to those that are willing to run in debug mode.\n   * @param  {string} [payload.description] - The description for this instance.\n   * @param  {object} [payload.inputs] - The input data. A free-form object that should conform to the\n   * specification in the associated databot definition.\n   * @param  {string} [payload.name] - The name to associate with this instance, e.g. \"Male population\n   * projection 2017\"\n   * @param  {string} [payload.overwriteExisting] - The id of an existing instance that should be overwritten.\n   * @param  {number} [payload.priority] - The priority to assign this instance. Reserved for system use.\n   * @param  {string} payload.shareKeyId - The share key to run the databot under.\n   * @param  {string} [payload.shareKeySecret] - The secret of the share key. Ignored if the share key id refers to a\n   * user-based account.\n   */\n  startDatabotInstance(databotId, payload) {\n    const postData = {\n      databotId,\n      instanceData: payload,\n    };\n    const request = buildCommandRequest.call(this, \"databot/startInstance\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.startDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"startDatabotInstance\"));\n  }\n\n  /**\n   * Aborts a running databot instance.\n   * @param  {string} instanceId - The id of the instance to abort.\n   */\n  abortDatabotInstance(instanceId) {\n    const postData = {\n      instanceId,\n    };\n    const request = buildCommandRequest.call(this, \"databot/abortInstance\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.abortDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"abortDatabotInstance\"));\n  }\n\n  /**\n   * Terminates or pauses a running databot instance.\n   * @param  {string} instanceId - The id of the instance to terminate or pause.\n   * @param  {string} mode - One of [`\"stop\"`, `\"pause\"`, `\"resume\"`]\n   */\n  stopDatabotInstance(instanceId, mode) {\n    const postData = {\n      instanceId,\n      mode,\n    };\n    const request = buildCommandRequest.call(this, \"databot/stopInstance\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.stopDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"stopDatabotInstance\"));\n  }\n\n  /**\n   * Updates a databot host status.\n   *\n   * n.b. the response to this request will contain any commands from the TDX that the host should action (\n   * [see commands](https://github.com/nqminds/nqm-databots/tree/master/packages/nqm-databot-host#tdx-command-format)).\n   * @param  {object} payload - The databot host status payload.\n   * @param  {number} payload.port - The port number on which the host is listening.\n   * @param  {string} payload.hostStatus - The current host status, either \"idle\" or \"busy\".\n   * @param  {string} [payload.ip] - optional ip address of the host. Usually the TDX can deduce this from the incoming\n   * request.\n   * @example <caption>update databot host status</caption>\n   * tdxApi.updateDatabotHostStatus({port: 2312, hostStatus: \"idle\"});\n   */\n  updateDatabotHostStatus(payload) {\n    const request = buildDatabotHostRequest.call(this, \"status\", payload);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateDatabotHostStatus: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"updateDatabotHostStatus\"));\n  }\n\n  /**\n   * Stores databot instance output on the TDX.\n   * @param  {object} output - The output payload for the databot instance.\n   */\n  writeDatabotHostInstanceOutput(output) {\n    const request = buildDatabotHostRequest.call(this, \"output\", output);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.writeDatabotHostInstanceOutput: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"writeDatabotHostInstanceOutput\"));\n  }\n\n  /*\n   *\n   *  ZONE CONNECTION COMMANDS\n   *\n   */\n\n  /**\n   * Adds a zone connection to a remote TDX. The details for the connection should be retrieved by a call to the\n   * certificate endpoint for the TDX, e.g. https://tdx.nqminds.com/certficate.\n   * @param  {object} options - The zone connection details\n   * @param  {string} options.owner - The owner of the zone connection. Must be the same as the authenticated account.\n   * @param  {string} options.tdxServer - The URL of the target TDX auth server, e.g. https://tdx.nqminds.com\n   * @param  {string} [options.commandServer] - The URL of the target TDX command server, e.g. https://cmd.nqminds.com\n   * @param  {string} [options.queryServer] - The URL of the target TDX query server, e.g. https://q.nqminds.com\n   * @param  {string} [options.ddpServer] - The URL of the target TDX ddp server, e.g. https://ddp.nqminds.com\n   * @param  {string} [options.databotServer] - The URL of the target TDX databot server,\n   * e.g. https://databot.nqminds.com\n   * @param  {string} [options.displayName] - The friendly name of the TDX.\n   */\n  addZoneConnection(options) {\n    const request = buildCommandRequest.call(this, \"zoneConnection/create\", options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addZoneConnection: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"addZoneConnection\"));\n  }\n\n  /**\n   * Deletes a zone connection. The authenticated account must own the zone connection.\n   * @param  {string} id - The id of the zone connection to delete.\n   */\n  deleteZoneConnection(id) {\n    const request = buildCommandRequest.call(this, \"zoneConnection/delete\", {id});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteZoneConnection: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"deleteZoneConnection\"));\n  }\n\n  /**\n   * AUDIT COMMANDS\n   */\n\n  rollbackCommand(id) {\n    const request = buildCommandRequest.call(this, \"rollback\", {id});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.rollbackCommand: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"rollbackCommand\"));\n  }\n\n  /*\n   *\n   *  QUERIES\n   *\n   */\n\n  /**\n   * Creates a client user token (e.g. bound to the browser IP) for an application-user token bound to the\n   * given IP or the currently authenticated token IP. The currently authenticated token ***must*** be an application\n   * token, whereby the application has been authorised by the user and the user has permission to access the\n   * application. The returned token will be bound to the given IP or the IP of the currently authenticated token\n   * (i.e the application server IP).\n   *\n   * @param  {string} username - The users' TDX id.\n   * @param  {string} [ip] - The optional IP address to bind the user token to.\n   * @param  {number} [ttl] - The ttl in seconds.\n   * @return  {object} - The new application-user token, bound to the given IP.\n   * @example <caption>create token bound to server ip with default TDX ttl</caption>\n   * tdxApi.createTDXToken(\"bob@bob.com/acme.tdx.com\");\n   * @example <caption>create for specific IP</caption>\n   * tdxApi.createTDXToken(\"bob@bob.com/acme.tdx.com\", newClientIP);\n   */\n  createTDXToken(username, ip, ttl) {\n    const request = buildQueryRequest.call(this, \"token/create\", {username, ip, ttl});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.createTDXToken: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"createTDXToken\"));\n  }\n\n  /**\n   * Exchanges a client user token (e.g. bound to the browser IP) for an application-user token bound to the\n   * given IP or the currently authenticated token IP. The currently authenticated token ***must*** be an application\n   * token, whereby the application has been authorised by the user and the user has permission to access the\n   * application. The returned token will be bound to the given IP or the IP of the currently authenticated token\n   * (i.e the application server IP).\n   *\n   * @param  {string} token - The users' TDX auth server token to validate.\n   * @param  {string} [validateIP] - The optional IP address to validate the user token against.\n   * @param  {string} [exchangeIP] - The optional IP address to bind the new token to.\n   * @param  {number} [ttl] - The ttl in seconds.\n   * @return  {object} - The new token application-user token, bound to the server IP.\n   * @example <caption>validate against current IP</caption>\n   * tdxApi.exchangeTDXToken(clientToken);\n   * @example <caption>validate against different IP</caption>\n   * tdxApi.exchangeTDXToken(clientToken, newClientIP);\n   * @example <caption>validate against current IP, bind to a new IP</caption>\n   * tdxApi.exchangeTDXToken(clientToken, null, serverIP);\n   */\n  exchangeTDXToken(token, validateIP, exchangeIP, ttl) {\n    const request = buildQueryRequest.call(this, \"token/exchange\", {token, ip: validateIP, exchangeIP, ttl});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.exchangeTDXToken: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"exchangeTDXToken\"));\n  }\n\n  /**\n   * Streams the contents of a resource. For dataset-based resources this will stream the dataset contents in newline\n   * delimited JSON (NDJSON). For raw file resources this will stream the raw file contents (zip, raw JSON etc).\n   * @param  {string} resourceId - The id of the resource to be downloaded.\n   * @return {object} - Response object, where the response body is a stream object.\n   */\n  downloadResource(resourceId) {\n    const request = buildQueryRequest.call(this, `resources/${resourceId}/download`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.downloadResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      });\n  }\n\n  /**\n   * Gets the details for a given account id.\n   * @param  {string} accountId - the id of the account to be retrieved.\n   * @return  {Zone} zone\n   */\n  getAccount(accountId) {\n    const request = buildQueryRequest.call(this, \"accounts\", {username: accountId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getAccount\"))\n      .then((accountList) => {\n        return accountList && accountList.length ? accountList[0] : null;\n      });\n  }\n\n  /**\n   * Gets the details for all peer accounts.\n   * @param  {object} filter - query filter.\n   * @param  {string} filter.accountType - the account type to filter by, e.g. \"user\", \"token\", \"host\" etc.\n   * @return  {Zone[]} zone\n   * @example <caption>Get all databots owned by bob</caption>\n   * api.getAccounts({accountType: \"host\", own: \"bob@nqminds.com\"})\n   */\n  getAccounts(filter) {\n    const request = buildQueryRequest.call(this, \"accounts\", filter);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getAccounts: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getAccounts\"));\n  }\n\n  /**\n   * Performs an aggregate query on the given dataset resource, returning a response object with stream in the body\n   * @param  {string} datasetId - The id of the dataset-based resource to perform the aggregate query on.\n   * @param  {object|string} pipeline - The aggregate pipeline, as defined in the\n   * [mongodb docs](https://docs.mongodb.com/manual/aggregation/). Can be given as a JSON object or as a stringified\n   * JSON object.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {object} - Response object, where the response body is a stream object.\n   */\n  getAggregateDataStream(datasetId, pipeline, ndJSON) {\n    // Convert pipeline to string if necessary.\n    if (pipeline && typeof pipeline === \"object\") {\n      pipeline = JSON.stringify(pipeline);\n    }\n    const endpoint = `resources/${datasetId}/${ndJSON ? \"ndaggregate\" : \"aggregate\"}?pipeline=${pipeline}`;\n    const request = buildQueryRequest.call(this, endpoint);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getAggregateData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      });\n  }\n\n  /**\n   * Performs an aggregate query on the given dataset resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to perform the aggregate query on.\n   * @param  {object|string} pipeline - The aggregate pipeline, as defined in the\n   * [mongodb docs](https://docs.mongodb.com/manual/aggregation/). Can be given as a JSON object or as a stringified\n   * JSON object.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {DatasetData}\n   */\n  getAggregateData(datasetId, pipeline, ndJSON) {\n    return this.getAggregateDataStream(datasetId, pipeline, ndJSON)\n      .then(checkResponse.bind(this, \"getAggregateData\"));\n  }\n\n  /**\n   * Gets details of the currently authenticated account.\n   * @return  {object} - Details of the authenticated account.\n   */\n  getAuthenticatedAccount() {\n    const request = buildQueryRequest.call(this, \"auth-account\");\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getAuthenticatedAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getAuthenticatedAccount\"));\n  }\n\n  /**\n   * Gets all data from the given dataset resource that matches the filter provided and returns a response object with\n   * stream in the body.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {object} - Response object, where the response body is a stream object.\n   */\n  getDataStream(datasetId, filter, projection, options, ndJSON) {\n    const endpoint = `resources/${datasetId}/${ndJSON ? \"nddata\" : \"data\"}`;\n    const request = buildQueryRequest.call(this, endpoint, filter, projection, options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDataStream: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      });\n  }\n\n  /**\n   * For structured resources, e.g. datasets, this function gets all data from the given dataset resource that\n   * matches the filter provided.\n   *\n   * For non-structured resources such as text-content or raw files etc only the `datasetId` argument is relevant\n   * and this method is equivalent to `downloadResource`.\n   *\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {DatasetData}\n   */\n  getData(datasetId, filter, projection, options, ndJSON) {\n    return this.getDataStream(datasetId, filter, projection, options, ndJSON)\n      .then(checkResponse.bind(this, \"getData\"));\n  }\n\n  /**\n   * Sugar for newline delimited data. See `getData` for details.\n   */\n  getNDData(datasetId, filter, projection, options) {\n    return this.getDataStream(datasetId, filter, projection, options, true)\n      .then(checkResponse.bind(this, \"getNDData\"));\n  }\n\n  /**\n   * @deprecated  use {@link TDXApi#getDataStream}\n   * Gets all data from the given dataset resource that matches the filter provided and returns a response object with\n   * stream in the body.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {object} - Response object, where the response body is a stream object.\n   */\n  getDatasetDataStream(datasetId, filter, projection, options, ndJSON) {\n    return this.getDataStream(datasetId, filter, projection, options, ndJSON);\n  }\n\n  /**\n   * @deprecated  use {@link TDXApi#getData}\n   * Gets all data from the given dataset resource that matches the filter provided.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {DatasetData}\n   */\n  getDatasetData(datasetId, filter, projection, options, ndJSON) {\n    return this.getData(datasetId, filter, projection, options, ndJSON);\n  }\n\n  /**\n   * Gets a count of the data in a dataset-based resource, after applying the given filter.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - An optional mongodb filter to apply before counting the data.\n   */\n  getDataCount(datasetId, filter) {\n    const request = buildQueryRequest.call(this, `resources/${datasetId}/count`, filter);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDataCount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getDataCount\"));\n  }\n\n  /**\n   * @deprecated  use {@link TDXApi#getDataCount}\n   * Gets a count of the data in a dataset-based resource, after applying the given filter.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - An optional mongodb filter to apply before counting the data.\n   */\n  getDatasetDataCount(datasetId, filter) {\n    return this.getDataCount(datasetId, filter);\n  }\n\n  /**\n   * Gets a list of distinct values for a given property in a dataset-based resource.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {string} key - The name of the property to use. Can be a property path, e.g. `\"address.postcode\"`.\n   * @param  {object} [filter] - An optional mongodb filter to apply.\n   * @return  {object[]} - The distinct values.\n   */\n  getDistinct(datasetId, key, filter, projection, options) {\n    const request = buildQueryRequest.call(this, `resources/${datasetId}/distinct?key=${key}`, filter, projection, options); // eslint-disable-line max-len\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDistinct: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getDistinct\"));\n  }\n\n  /**\n   * Gets the details for a given resource id.\n   * @param  {string} resourceId - The id of the resource to retrieve.\n   * @param  {bool} [noThrow=false] - If set, the call won't reject or throw if the resource doesn't exist.\n   * @return  {Resource}\n   * @exception  Will throw if the resource is not found (see `noThrow` flag) or permission is denied.\n   * @example\n   * api.getResource(myResourceId)\n   *  .then((resource) => {\n   *    console.log(resource.name);\n   *  });\n   */\n  getResource(resourceId, noThrow) {\n    const request = buildQueryRequest.call(this, `resources/${resourceId}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then((response) => {\n        if (noThrow) {\n          // If noThrow specified, return null if there is an error fetching the resource, rather than throwing.\n          if (response.ok) {\n            return response.json();\n          } else if (response.status === 404) {\n            return null;\n          } else {\n            return checkResponse.call(this, \"getResource\", response);\n          }\n        } else {\n          return checkResponse.call(this, \"getResource\", response);\n        }\n      });\n  }\n\n  /**\n   * Gets all access the authenticated account has to the given resource id.\n   * @param  {string} resourceId - The id of the resource whose access is to be retrieved.\n   * @return {ResourceAccess[]} - Array of ResourceAccess objects.\n   * @example\n   * api.getResourceAccess(myResourceId)\n   *  .then((resourceAccess) => {\n   *    console.log(\"length of access list: \", resourceAccess.length);\n   *  });\n   */\n  getResourceAccess(resourceId, filter, projection, options) {\n    const request = buildQueryRequest.call(this, `resources/${resourceId}/access`, filter, projection, options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getResourceAccess: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then((response) => {\n        return checkResponse.call(this, \"getResourceAccess\", response);\n      });\n  }\n\n  /**\n   * Gets all resources that are ancestors of the given resource.\n   * @param  {string} resourceId - The id of the resource whose parents are to be retrieved.\n   * @return  {Resource[]}\n   */\n  getResourceAncestors(resourceId) {\n    const request = buildQueryRequest.call(this, `resources/${resourceId}/ancestors`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatasetAncestors: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getResourceAncestors\"));\n  }\n\n  /**\n   * Gets the details of all resources that match the given filter.\n   * @param  {object} [filter] - A mongodb filter definition\n   * @param  {object} [projection] - A mongodb projection definition, can be used to restrict which properties are\n   * returned thereby limiting the payload.\n   * @param  {object} [options] - A mongodb options definition, can be used for limit, skip, sorting etc.\n   * @return  {Resource[]}\n   */\n  getResources(filter, projection, options) {\n    const request = buildQueryRequest.call(this, \"resources\", filter, projection, options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getResources\"));\n  }\n\n  /**\n   * Retrieves all resources that have an immediate ancestor of the given schema id.\n   * @param  {string} schemaId - The id of the schema to match, e.g. `\"geojson\"`.\n   * @return  {Resource[]}\n   */\n  getResourcesWithSchema(schemaId) {\n    const filter = {\"schemaDefinition.parent\": schemaId};\n    return this.getResources(filter);\n  }\n\n  /**\n   * Retrieves an authorisation token for the given TDX instance\n   * @param  {string} tdx - The TDX instance name, e.g. `\"tdx.acme.com\"`.\n   * @return  {string}\n   */\n  getTDXToken(tdx) {\n    const request = buildQueryRequest.call(this, `tdx-token/${tdx}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getTDXToken: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"getTDXToken\"));\n  }\n\n  /**\n   * Gets the details for a given zone (account) id.\n   * @param  {string} accountId - the id of the zone to be retrieved.\n   * @return  {Zone} zone\n   */\n  getZone(accountId) {\n    return this.getAccount(accountId);\n  }\n\n  /**\n   * Determines if the given account is a member of the given group.\n   * @param {string} accountId - the id of the account\n   * @param {*} groupId - the id of the group\n   */\n  isInGroup(accountId, groupId) {\n    const lookup = {\n      aid: accountId,\n      \"r.0\": {$exists: true},\n      grp: \"m\",\n    };\n    return this.getResourceAccess(groupId, lookup)\n      .then((access) => {\n        return !!access.length;\n      });\n  }\n\n  /**\n   * Validates the given token was signed by this TDX, and returns the decoded token data.\n   * @param  {string} token - The TDX auth server token to validate.\n   * @param  {string} [ip] - The optional IP address to validate against.\n   * @return  {object} - The decoded token data.\n   */\n  validateTDXToken(token, ip) {\n    const request = buildQueryRequest.call(this, \"token/validate\", {token, ip});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.validateTDXToken: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(this, \"validateTDXToken\"));\n  }\n}\n\nexport default TDXApi;\n\n\n\n// WEBPACK FOOTER //\n// ./src/api-tdx.js","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cross-fetch\"\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}