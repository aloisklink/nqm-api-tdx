{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap fff9c646bc0980d40bd5","webpack:///external \"debug\"","webpack:///./src/helpers.js","webpack:///external \"base-64\"","webpack:///./src/api-tdx.js","webpack:///external \"@nqminds/isomorphic-fetch\"","webpack:///external \"bluebird\""],"names":["Promise","pollingRetries","pollingInterval","waitInfinitely","fetchWithDeadline","request","log","resolve","reject","deadline","rejected","config","networkTimeout","setTimeout","Error","then","response","catch","err","message","finally","clearTimeout","TDXApiError","stack","name","prototype","Object","create","constructor","handleError","source","failure","code","internal","from","JSON","stringify","buildCommandRequest","command","data","contentType","async","commandMode","Request","commandServer","method","mode","headers","Headers","accessToken","body","buildDatabotHostRequest","databotServer","buildQueryRequest","endpoint","filter","projection","options","query","indexOf","queryServer","buildDatabotInstanceRequest","checkResponse","json","ok","error","error_description","status","setDefaults","tdxServer","tdxHost","commandHost","databotHost","queryHost","protocolComponents","split","length","protocol","hostComponents","hostname","slice","join","undefined","waitForResource","resourceId","check","retryCount","maxRetries","getResource","resource","checkResult","call","parseError","parse","parseEx","waitForIndex","datasetId","initialStatus","builtIndexCheck","dataset","indexStatus","stopWaiting","schemaDefinition","basedOn","Math","min","errLog","TDXApi","authToken","id","secret","ttl","ip","credentials","encodeURIComponent","encode","uri","grant_type","accessTokenTTL","bind","result","access_token","username","approved","key","verified","wait","accountId","sourceId","access","rid","aid","src","acc","concat","resourceIdList","payload","file","stream","compressed","base64Encoded","endPoint","size","text","spread","fromParentId","toParentId","res","addedBy","by","schema","shareMode","allowPermissive","permissiveShare","update","postData","upsert","__upsert","instanceId","processId","hostId","hostIp","hostPort","databotId","instanceData","output","token","pipeline","ndJSON","getAggregateDataStream","getDataStream","getData","noThrow","schemaId","getResources","tdx","zoneList"],"mappings":"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","file":"nqm-api-tdx.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"debug\"), require(\"base-64\"), require(\"@nqminds/isomorphic-fetch\"), require(\"bluebird\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"nqm-api-tdx\", [\"debug\", \"base-64\", \"@nqminds/isomorphic-fetch\", \"bluebird\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nqm-api-tdx\"] = factory(require(\"debug\"), require(\"base-64\"), require(\"@nqminds/isomorphic-fetch\"), require(\"bluebird\"));\n\telse\n\t\troot[\"nqm-api-tdx\"] = factory(root[\"debug\"], root[\"base-64\"], root[\"@nqminds/isomorphic-fetch\"], root[\"bluebird\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fff9c646bc0980d40bd5","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 0\n// module chunks = 0","import debug from \"debug\";\nimport Promise from \"bluebird\";\nimport fetch from \"@nqminds/isomorphic-fetch\";\n\n// Bind to bluebird promise library for now.\nfetch.Promise = Promise;\n\nconst pollingRetries = 15;\nconst pollingInterval = 1000;\nconst waitInfinitely = -1;\n\nconst fetchWithDeadline = function(request) {\n  const log = debug(\"nqm-api-tdx:fetchWithDeadline\");\n\n  //\n  // Implement a timeout. We have to do this manually pending a native fix\n  // on fetch() - see https://github.com/whatwg/fetch/issues/20).\n  //\n  return new Promise((resolve, reject) => {\n    let deadline;\n    let rejected = false;\n\n    if (this.config.networkTimeout) {\n      // Reject the promise if the timeout expires.\n      deadline = setTimeout(\n        () => {\n          log(\"deadline expired after %d ms\", this.config.networkTimeout);\n          deadline = 0;\n          rejected = true;\n          reject(new Error(`deadline expired after ${this.config.networkTimeout} ms`));\n        },\n        this.config.networkTimeout\n      );\n    } else {\n      // Never timeout.\n      deadline = 0;\n    }\n\n    Promise.resolve(fetch(request))\n      .then((response) => {\n        // Forward response.\n        resolve(response);\n      })\n      .catch((err) => {\n        if (!rejected) {\n          reject(err);\n        } else {\n          log(\"already rejected by timeout, ignoring rejection [%s]\", err.message);\n        }\n      })\n      .finally(() => {\n        // Cancel pending deadline.\n        if (deadline) {\n          clearTimeout(deadline);\n        }\n      });\n  });\n};\n\nconst TDXApiError = function(message, stack) {\n  this.name = \"TDXApiError\";\n  this.message = message || \"no message given\";\n  this.stack = stack || (new Error()).stack;\n};\n\nTDXApiError.prototype = Object.create(Error.prototype);\nTDXApiError.prototype.constructor = TDXApiError;\n\n/**\n * Formats a TDXApiError object.\n * @param  {string} source - The source of the error, usually a function name.\n * @param  {object} failure - The error details, in the form `{code: xxx, message: yyy}`\n * @param  {string} code - The error code, usually the response status code, e.g. 422, 401 etc.\n */\nconst handleError = function(source, failure, code) {\n  const internal = {\n    from: source,\n    failure: JSON.stringify(failure),\n    code: typeof code === \"undefined\" ? \"n/a\" : code,\n  };\n  return new TDXApiError(JSON.stringify(internal), (new Error()).stack);\n};\n\n/**\n * Builds a Request object for the given command bound to the TDX command service.\n * @param  {string} command - the target TDX command, e.g. \"resource/create\"\n * @param  {object} data - the command payload\n * @param  {string} [contentType=application/json] - the content type\n * @param  {bool} [noSync=false] - send command asynchronously\n */\nconst buildCommandRequest = function(command, data, contentType, async) {\n  const commandMode = async ? \"command\" : \"commandSync\";\n  contentType = contentType || \"application/json\";\n  return new Request(`${this.config.commandServer}/${commandMode}/${command}`, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: new Headers({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": contentType,\n    }),\n    body: JSON.stringify(data),\n  });\n};\n\n/**\n * Builds a Request object for the given command bound to the TDX databot service.\n * @param  {string} command - the target TDX command, e.g. \"register\"\n * @param  {object} data - the command payload\n * @param  {string} [contentType=application/json] - the content type\n */\nconst buildDatabotHostRequest = function(command, data) {\n  return new Request(`${this.config.databotServer}/host/${command}`, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: new Headers({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": \"application/json\",\n    }),\n    body: JSON.stringify(data),\n  });\n};\n\n/**\n * Builds a Request object for the given query bound to the TDX query engine.\n * @param  {string} endpoint - the query endpoint, e.g. \"resources/DKJF8d8f\"\n * @param  {object} [filter] - a filter expression, e.g. {\"temperature\": {$gt: 18}}\n * @param  {object} [projection] - a projection definition defining what data will be returned, e.g. {sensorId: 1,\n * temperature: 1}\n * @param  {object} [options] - query options, e.g. {limit: 10, sort: {timestamp: -1}}\n */\nconst buildQueryRequest = function(endpoint, filter, projection, options) {\n  filter = filter ? JSON.stringify(filter) : \"\";\n  projection = projection ? JSON.stringify(projection) : \"\";\n  options = options ? JSON.stringify(options) : \"\";\n  let query;\n  if (endpoint.indexOf(\"?\") < 0) {\n    // There is no query portion in the prefix - add one now.\n    query = `${endpoint}?filter=${filter}&proj=${projection}&opts=${options}`;\n  } else {\n    // There is already a query portion, so append the params.\n    query = `${endpoint}&filter=${filter}&proj=${projection}&opts=${options}`;\n  }\n  return new Request(`${this.config.queryServer}${query}`, {\n    method: \"GET\",\n    mode: \"cors\",\n    headers: new Headers({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": \"application/json\",\n    }),\n  });\n};\n\n/**\n * Builds a Request object for the given databot instance query bound to the TDX databot server.\n * @param  {string} endpoint - the databot query endpoint, e.g. \"status/jDduieG7\"\n */\nconst buildDatabotInstanceRequest = function(endpoint) {\n  return new Request(`${this.config.databotServer}/instance/${endpoint}`, {\n    method: \"GET\",\n    mode: \"cors\",\n    headers: new Headers({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": \"application/json\",\n    }),\n  });\n};\n\nconst checkResponse = function(source, response) {\n  return response.json()\n    .then((json) => {\n      if (response.ok) {\n        return Promise.resolve(json);\n      } else {\n        if (json.error) {\n          // Build a failure object from the json response.\n          const failure = {code: json.error, message: json.error_description};\n          return Promise.reject(handleError(source, failure, response.status));\n        } else {\n          // The response body holds the error details.\n          return Promise.reject(handleError(source, json, response.status));\n        }\n      }\n    });\n};\n\nconst setDefaults = function(config) {\n  const log = debug(\"nqm-api-tdx:setDefaults\");\n\n  // Legacy config support.\n  config.tdxServer = config.tdxServer || config.tdxHost;\n  config.commandServer = config.commandServer || config.commandHost;\n  config.databotServer = config.databotServer || config.databotHost;\n  config.queryServer = config.queryServer || config.queryHost;\n\n  if (config.tdxServer && (!config.queryServer || !config.commandServer)) {\n    const protocolComponents = config.tdxServer.split(\"://\");\n    if (protocolComponents.length !== 2) {\n      throw new Error(`invalid tdxServer in config - no protocol: ${config.tdxServer}`);\n    }\n    const protocol = protocolComponents[0];\n    const hostComponents = protocolComponents[1].split(\".\");\n    if (hostComponents.length < 3) {\n      throw new Error(`invalid tdxServer in config - expected sub.domain.tld: ${config.tdxServer}`);\n    }\n    const hostname = hostComponents.slice(1).join(\".\");\n    config.databotServer = config.databotServer || `${protocol}://databot.${hostname}`;\n    config.commandServer = config.commandServer || `${protocol}://cmd.${hostname}`;\n    config.queryServer = config.queryServer || `${protocol}://q.${hostname}`;\n  }\n\n  // Append version qualifier to query path.\n  config.queryServer = config.queryServer && `${config.queryServer}/v1/`;\n\n  log(\n    \"using hosts: command %s, databot %s, query %s, auth %s\",\n    config.commandServer || \"[n/a]\",\n    config.databotServer || \"[n/a]\",\n    config.queryServer || \"[n/a]\",\n    config.tdxServer || \"[n/a]\",\n  );\n\n  // Default network timeout to 2 mins.\n  config.networkTimeout = config.networkTimeout === undefined ? 120000 : config.networkTimeout;\n};\n\nconst waitForResource = function(resourceId, check, retryCount, maxRetries) {\n  const log = debug(\"nqm-api-tdx:waitForResource\");\n  retryCount = retryCount || 0;\n  return this.getResource(resourceId)\n    .then((resource) => {\n      const checkResult = check(resource, retryCount);\n      if (checkResult instanceof Error) {\n        log(\"waitForResource - check failed with error [%s]\", checkResult.message);\n        return Promise.reject(checkResult);\n      }\n\n      if (!checkResult) {\n        // A negative maxRetries value will retry indefinitely.\n        if (maxRetries >= 0 && retryCount > maxRetries) {\n          log(\"giving up after %d attempts\", retryCount);\n          return Promise.reject(new Error(`gave up waiting for ${resourceId} after ${retryCount} attempts`));\n        }\n\n        // Try again after a delay.\n        log(\"waiting for %d msec\", pollingInterval);\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            log(\"trying again\");\n            resolve(waitForResource.call(this, resourceId, check, retryCount + 1, maxRetries));\n          }, pollingInterval);\n        });\n      } else {\n        return resource;\n      }\n    })\n    .catch((err) => {\n      if (err.name !== \"TDXApiError\") {\n        return Promise.reject(err);\n      } else {\n        try {\n          const parseError = JSON.parse(err.message);\n          const failure = JSON.parse(parseError.failure);\n          // Restify error code had the 'Error' suffix removed post v3.x\n          if (\n            failure.code === \"NotFound\" ||\n            failure.code === \"NotFoundError\" ||\n            failure.code === \"Unauthorized\" ||\n            failure.code === \"UnauthorizedError\"\n          ) {\n            // Ignore resource not found and not authorized errors here, they are probably caused by\n            // waiting for the projections to catch up (esp. in debug environments). By falling through\n            // we will still be limited by the retry count, so won't loop forever.\n            log(\"ignoring error %s\", err.message);\n            return new Promise((resolve) => {\n              setTimeout(() => {\n                resolve(waitForResource.call(this, resourceId, check, retryCount + 1, maxRetries));\n              }, pollingInterval);\n            });\n          } else {\n            // All other errors are fatal.\n            return Promise.reject(err);\n          }\n        } catch (parseEx) {\n          // Failed to parse TDX error - re-throw the original error.\n          log(\"failure: [%s]\", parseEx.message);\n          return Promise.reject(err);\n        }\n      }\n    });\n};\n\nconst waitForIndex = function(datasetId, status, maxRetries) {\n  const log = debug(\"nqm-api-tdx:waitForIndex\");\n\n  // The argument maxRetries is optional.\n  if (typeof maxRetries === \"undefined\") {\n    maxRetries = waitInfinitely;\n  }\n  status = status || \"built\";\n\n  let initialStatus = \"\";\n\n  const builtIndexCheck = function(dataset, retryCount) {\n    log(\"builtIndexCheck: %s\", dataset ? dataset.indexStatus : \"no dataset\");\n\n    let stopWaiting;\n\n    if (dataset && dataset.schemaDefinition && dataset.schemaDefinition.basedOn[0] !== \"dataset\") {\n      // No need to wait for the index on non-dataset resources.\n      stopWaiting = true;\n    } else if (dataset && dataset.indexStatus === \"error\") {\n      // Handle \"error\" index status.\n      if (!initialStatus) {\n        // Haven't got an initial status yet, so can't make a judgment as to whether or not the error status\n        // is new, or the index was already in an error state.\n        stopWaiting = false;\n      } else if (initialStatus !== \"error\") {\n        // The index status has transitioned from non-error to error => abort\n        stopWaiting = new Error(\"index entered error status\");\n      } else {\n        // The index status started as an error and is still an error => allow a limited number of retries\n        // irrespective of the requested maxRetries.\n        if (retryCount > Math.min(maxRetries, pollingRetries)) {\n          stopWaiting = new Error(`index still in error status after ${retryCount} retries`);\n        } else {\n          stopWaiting = false;\n        }\n      }\n    } else {\n      stopWaiting = !!dataset && dataset.indexStatus === status;\n    }\n\n    // Cache the first index status we see.\n    if (dataset && !initialStatus) {\n      initialStatus = dataset.indexStatus;\n    }\n\n    return stopWaiting;\n  };\n\n  return waitForResource.call(this, datasetId, builtIndexCheck, 0, maxRetries);\n};\n\nexport {\n  buildCommandRequest,\n  buildDatabotHostRequest,\n  buildDatabotInstanceRequest,\n  buildQueryRequest,\n  checkResponse,\n  fetchWithDeadline,\n  handleError,\n  setDefaults,\n  TDXApiError,\n  waitForIndex,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"base-64\"\n// module id = 2\n// module chunks = 0","import base64 from \"base-64\";\nimport debug from \"debug\";\nimport {\n  buildCommandRequest,\n  buildDatabotHostRequest,\n  buildDatabotInstanceRequest,\n  buildQueryRequest,\n  checkResponse,\n  fetchWithDeadline as fetch,\n  handleError,\n  setDefaults,\n  waitForIndex,\n} from \"./helpers\";\n\nconst log = debug(\"nqm-api-tdx\");\nconst errLog = debug(\"nqm-api-tdx:error\");\n\n/**\n * @typedef  {object} CommandResult\n * @property  {string} commandId - The auto-generated unique id of the command.\n * @property  {object|string} response - The response of the command. If a command is sent asynchronously, this will\n * simply be the string `\"ack\"`. In synchronous mode, this will usually be an object consisting of the primary key\n * of the data that was affected by the command.\n * @property  {object} result - Contains detailed error information when available.\n */\n\n/**\n * @typedef  {object} DatasetData\n * @property  {object} metaData - The dataset metadata (see `nqmMeta` option in `getDatasetData`).\n * @property  {string} metaDataUrl - The URL to the dataset metadata (see `nqmMeta` option in `getDatasetData`.\n * @property  {object[]} data - The dataset documents.\n */\n\n/**\n * @typedef  {object} Resource\n * @property  {string} description\n * @property  {string} id\n * @property  {string} name\n * @property  {string[]} parents\n * @property  {object} schemaDefinition\n * @property  {string[]} tags\n */\n\n/**\n * @typedef  {object} Zone\n * @property  {string} accountType\n * @property  {string} displayName\n * @property  {string} username\n */\n\nclass TDXApi {\n  /**\n   * Create a TDXApi instance\n   * @param  {object} config - the TDX configuration for the remote TDX\n   * @param  {string} [config.tdxServer] - the URL of the TDX auth server, e.g. https://tdx.nqminds.com. Usually this\n   * is the only host parameter needed, as long as the target TDX conforms to the standard service naming conventions\n   * e.g. https://[service].[tdx-domain].com. In this case the individual service hosts can be derived from the tdxHost\n   * name. Optionally, you can specify each individual service host (see below). Note you only need to provide the host\n   * for services you intend to use. For example, if you only need query services, just provide the query host.\n   * @param  {string} [config.commandServer] - the URL of the TDX command service, e.g. https://cmd.nqminds.com\n   * @param  {string} [config.queryServer] - the URL of the TDX query service, e.g. https://q.nqminds.com\n   * @param  {string} [config.databotServer] - the URL of the TDX databot service, e.g. https://databot.nqminds.com\n   * @param  {string} [config.accessToken] - an access token that will be used to authorise commands and queries.\n   * Alternatively you can use the authenticate method to acquire a token.\n   * @example <caption>standard usage</caption>\n   * import TDXApi from \"nqm-api-tdx\";\n   * const api = new TDXApi({tdxServer: \"https://tdx.acme.com\"});\n   */\n  constructor(config) {\n    this.config = {...config};\n    this.accessToken = config.accessToken || config.authToken || \"\";\n    setDefaults(this.config);\n  }\n\n  /**\n   * Authenticates with the TDX, acquiring an authorisation token.\n   * @param  {string} id - the account id, or a pre-formed credentials string, e.g. \"DKJG8dfg:letmein\"\n   * @param  {string} secret - the account secret\n   * @param  {number} [ttl=3600] - the Time-To-Live of the token in seconds, default is 1 hour.\n   * @return  {string} The access token.\n   * @exception Will throw if credentials are invalid or there is a network error contacting the TDX.\n   * @example <caption>authenticate using a share key and secret</caption>\n   * tdxApi.authenticate(\"DKJG8dfg\", \"letmein\");\n   * @example <caption>authenticate using custom ttl of 2 hours</caption>\n   * tdxApi.authenticate(\"DKJG8dfg\", \"letmein\", 7200);\n   */\n  authenticate(id, secret, ttl, ip) {\n    let credentials;\n\n    if (typeof secret !== \"string\") {\n      // Assume the first argument is a pre-formed credentials string\n      credentials = id;\n      ip = ttl;\n      ttl = secret;\n    } else {\n      // uri-encode the username and concatenate with secret.\n      credentials = `${encodeURIComponent(id)}:${secret}`;\n    }\n\n    // Authorization headers must be base-64 encoded.\n    credentials = base64.encode(credentials);\n\n    // We can get a token from any of the TDX services - use the first one we find to build a fetch Request.\n    const uri = `${this.config.tdxServer || this.config.commandServer || this.config.queryServer}/token`;\n    const request = new Request(uri, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: new Headers({\n        \"Authorization\": `Basic ${credentials}`,\n        \"Content-Type\": \"application/json\",\n      }),\n      body: JSON.stringify({grant_type: \"client_credentials\", ip, ttl: ttl || this.config.accessTokenTTL || 3600}),\n    });\n\n    return fetch.call(this, request)\n      .then(checkResponse.bind(null, \"authenticate\"))\n      .then((result) => {\n        log(result);\n        this.accessToken = result.access_token;\n        return this.accessToken;\n      })\n      .catch((err) => {\n        errLog(`authenticate error: ${err.message}`);\n        return Promise.reject(err);\n      });\n  }\n\n  /*\n   *\n   *  ACCOUNT COMMANDS\n   *\n   */\n\n  /**\n   * Adds an account to the TDX. An account can be an e-mail based user account, a share key (token) account,\n   * a databot host, an application, or an account-set (user group).\n   * @param  {object} options - new account options\n   * @param  {string} options.accountType - the type of account, one of [\"user\", \"token\"]\n   * @param  {bool} [options.approved] - account is pre-approved (reserved for system use only)\n   * @param  {string} [options.authService] - the authentication type, one of [\"local\", \"oauth:google\",\n   * \"oauth:github\"]. Required for user-based accounts. Ignored for non-user accounts.\n   * @param  {string} [options.displayName] - the human-friendly display name of the account, e.g. \"Toby's share key\"\n   * @param  {number} [options.expires] - a timestamp at which the account expires and will no longer be granted a\n   * token\n   * @param  {string} [options.key] - the account secret. Required for all but oauth-based account types.\n   * @param  {string} [options.owner] - the owner of the account.\n   * @param  {bool} [options.scratchAccess] - indicates this account can create resources in the owners scratch\n   * folder. Ignored for all accounts except share key (token) accounts. Is useful for databots that need to create\n   * intermediate or temporary resources without specifying a parent resource - if no parent resource is given\n   * when a resource is created and scratch access is enabled, the resource will be created in the owner's scratch\n   * folder.\n   * @param  {object} [options.settings] - free-form JSON object for user data.\n   * @param  {string} [options.username] - the username of the new account. Required for user-based accounts, and\n   * should be the account e-mail address. Can be omitted for non-user accounts, and will be auto-generated.\n   * @param  {bool} [options.verified] - account is pre-verified (reserved for system use only)\n   * @param  {string[]} [options.whitelist] - a list of IP addresses. Tokens will only be granted if the requesting\n   * IP address is in this list\n   * @return  {CommandResult}\n   */\n  addAccount(options) {\n    const request = buildCommandRequest.call(this, \"account/create\", options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addAccount\"));\n  }\n\n  /**\n   * Set account approved status. Reserved for system use.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {bool} approved - account approved status\n   */\n  approveAccount(username, approved) {\n    const request = buildCommandRequest.call(this, \"account/approve\", {username, approved});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.approveAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"approveAccount\"));\n  }\n\n  /**\n   * Delete an account\n   * @param  {string} username - the full TDX identity of the account to delete.\n   */\n  deleteAccount(username) {\n    const request = buildCommandRequest.call(this, \"account/delete\", {username});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteAccount\"));\n  }\n\n  /**\n   * Change account secret.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {string} key - the new secret\n   */\n  resetAccount(username, key) {\n    const request = buildCommandRequest.call(this, \"account/reset\", {username, key});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.resetAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"resetAccount\"));\n  }\n\n  /**\n   * Updates account details. All update properties are optional. See createAccount for full details of\n   * each option.\n   * @param  {string} username - the full TDX identity of the account to update.\n   * @param  {object} options - the update options\n   * @param  {string} [options.displayName]\n   * @param  {string} [options.key]\n   * @param  {bool} [options.scratchAccess]\n   * @param  {object} [options.settings]\n   * @param  {string[]} [options.whitelist]\n   */\n  updateAccount(username, options) {\n    const request = buildCommandRequest.call(this, \"account/update\", {username, ...options});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addAccount\"));\n  }\n\n  /**\n   * Set account verified status. Reserved for system use.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {bool} approved - account verified status\n   */\n  verifyAccount(username, verified) {\n    const request = buildCommandRequest.call(this, \"account/verify\", {username, verified});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.verifyAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"verifyAccount\"));\n  }\n\n  /*\n   *\n   *  RESOURCE COMMANDS\n   *\n   */\n\n  /**\n   * Adds a data exchange to the list of trusted exchanges known to the current TDX.\n   * @param  {object} options\n   * @param  {string} options.owner - the account on this TDX to which the trust relates,\n   * e.g. `bob@mail.com/tdx.acme.com`\n   * @param  {string} options.targetServer - the TDX to be trusted, e.g. `tdx.nqminds.com`\n   * @param  {string} options.targetOwner - the account on the target TDX that is trusted,\n   * e.g. `alice@mail.com/tdx.nqminds.com`.\n   */\n  addTrustedExchange(options) {\n    const request = buildCommandRequest.call(this, \"trustedConnection/create\", options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addTrustedExchange: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addTrustedExchange\"));\n  }\n\n  /**\n   * Adds a resource to the TDX.\n   * @param  {object} options - details of the resource to be added.\n   * @param  {string} [options.basedOnSchema=dataset] - the id of the schema on which this resource will be based.\n   * @param  {object} [options.derived] - definition of derived filter, implying this resource is a view on an existing\n   * dataset.\n   * @param  {object} [options.derived.filter] - the (read) filter to apply, in mongodb query format,\n   * e.g. `{\"temperature\": {\"$gt\": 15}}` will mean that only data with a temperature value greater than 15 will be\n   * available in this view. The filter can be any arbitrarily complex mongodb query. Use the placeholder\n   * `\"@@_identity_@@\"` to indicate that the identity of the currently authenticated user should be substituted.\n   * For example, if the user `bob@acme.com/tdx.acme.com` is currently authenticated, a filter of `{\"username\":\n   *  \"@@_identity_@@\"}` will resolve at runtime to `{\"username\": \"bob@acme.com/tdx.acme.com\"}`.\n   * @param  {object} [options.derived.projection] - the (read) projection to apply, in mongodb projection format,\n   * e.g. `{\"timestamp\": 1, \"temperature\": 1}` implies only the 'timestamp' and 'temperature' properties will be\n   * returned.\n   * @param  {string} [options.derived.source] - the id of the source dataset on which to apply the filters and\n   * projections.\n   * @param  {object} [options.derived.writeFilter] - the write filter to apply, in mongodb query format. This\n   * controls what data can be written to the underlying source dataset. For example, a write filter of\n   * `{\"temperature\": {\"$lt\": 40}}` means that attempts to write a temperature value greater than or equal to `40`\n   * will fail. The filter can be any arbitrarily complex mongodb query.\n   * @param  {object} [options.derived.writeProjection] - the write projection to apply, in mongodb projection format.\n   * This controls what properties can be written to the underlying dataset. For example, a write projection of\n   * `{\"temperature\": 1}` means that only the temperature field can be written, and attempts to write data to other\n   * properties will fail. To allow a view to create new data in the underlying dataset, the primary key fields\n   * must be included in the write projection.\n   * @param  {string} [options.description] - a description for the resource.\n   * @param  {string} [options.id] - the requested ID of the new resource. Must be unique. Will be auto-generated if\n   * omitted (recommended).\n   * @param  {string} options.name - the name of the resource. Must be unique in the parent folder.\n   * @param  {object} [options.meta] - a free-form object for storing metadata associated with this resource.\n   * @param  {string} [options.parentId] - the id of the parent resource. If omitted, will default to the appropriate\n   * root folder based on the type of resource being created.\n   * @param  {string} [options.provenance] - a description of the provenance of the resource. Markdown format is\n   * supported.\n   * @param  {object} [options.schema] - optional schema definition.\n   * @param  {string} [options.shareMode] - the share mode assigned to the new resource. One of [`\"pw\"`, `\"pr\"`,\n   * `\"tr\"`], corresponding to \"public read/write\", \"public read/trusted write\", \"trusted only\".\n   * @param  {string[]} [options.tags] - a list of tags to associate with the resource.\n   * @param  {bool} [wait=false] - indicates if the call should wait for the index to be built before it returns.\n   * @example <caption>usage</caption>\n   * // Creates a dataset resource in the authenticated users' scratch folder. The dataset stores key/value pairs\n   * // where the `key` property is the primary key and the `value` property can take any JSON value.\n   * tdxApi.addResource({\n   *   name: \"resource #1\",\n   *   schema: {\n   *     dataSchema: {\n   *       key: \"string\",\n   *       value: {}\n   *     },\n   *     uniqueIndex: {key: 1}\n   *   }\n   * })\n   */\n  addResource(options, wait) {\n    const request = buildCommandRequest.call(this, \"resource/create\", options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addResource\"))\n      .then((result) => {\n        if (wait) {\n          return waitForIndex.call(this, result.response.id)\n            .then(() => {\n              return result;\n            });\n        } else {\n          return result;\n        }\n      });\n  }\n\n  /**\n   * Adds read and/or write permission for an account to access a resource. Permission is required\n   * equivalent to that which is being added, e.g. adding write permission requires existing\n   * write access.\n   * @param  {string} resourceId - The resource id\n   * @param  {string} accountId - The account id to assign permission to\n   * @param  {string} sourceId - The id of the resource acting as the source of the access. This\n   * is usually the same as the target `resourceId`, but can also be a parent resource. For example,\n   * if write access is granted with the sourceId set to be a parent, then if the permission is\n   * revoked from the parent resource it will also be revoked from this resource.\n   * @param  {string[]} access - The access, one or more of [`\"r\"`, `\"w\"`]. Can be an array or an individual\n   * string.\n   * @example <caption>add access to an account</caption>\n   * tdxApi.addResourceAccess(myResourceId, \"bob@acme.com/tdx.acme.com\", myResourceId, [\"r\"]);\n   */\n  addResourceAccess(resourceId, accountId, sourceId, access) {\n    const request = buildCommandRequest.call(this, \"resourceAccess/add\", {\n      rid: resourceId,\n      aid: accountId,\n      src: sourceId,\n      acc: [].concat(access),\n    });\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addResourceAccess: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addResourceAccess\"));\n  }\n\n  /**\n   * Permanently deletes a resource.\n   * @param  {string} resourceId - the id of the resource to delete. Requires write permission\n   * to the resource.\n   */\n  deleteResource(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/delete\", {id: resourceId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteResource\"));\n  }\n\n  /**\n   * Permanently deletes a list of resources.\n   * Will fail **all** deletes if any of the permission checks fail.\n   * @param  {string[]} resourceIdList - This list of resource ids to delete.\n   * @return  {CommandResult}\n   */\n  deleteManyResources(resourceIdList) {\n    const request = buildCommandRequest.call(this, \"resource/deleteMany\", {payload: resourceIdList});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteManyResources: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteManyResources\"));\n  }\n\n  /**\n   * Upload a file to a resource.\n   * @param  {string} resourceId - The id of the destination resource.\n   * @param  {object} file - The file to upload, obtained from an `<input type=\"file\">` element.\n   * @param  {bool} [stream=false] - Flag indicating whether the call should return a stream allowing\n   * callees to monitor progress.\n   * @param  {compressed} [boolean=false] - Flag indicating the file should be decompressed after upload. ZIP format\n   * only.\n   * @param  {base64Encoded} [boolean=false] = Flag indicating the file should be decoded from base64 after upload.\n   */\n  fileUpload(resourceId, file, stream, compressed = false, base64Encoded = false) {\n    let endPoint;\n    if (compressed) {\n      endPoint = \"compressedUpload\";\n    } else if (base64Encoded) {\n      endPoint = \"base64Upload\";\n    } else {\n      endPoint = \"upload\";\n    }\n    const request = new Request(`${this.config.commandServer}/commandSync/resource/${resourceId}/${endPoint}`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: new Headers({\n        \"Authorization\": `Bearer ${this.accessToken}`,\n        \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n        \"Content-Length\": file.size,\n      }),\n      body: file,\n    });\n\n    const response = fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.fileUpload: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      });\n\n    if (stream) {\n      return response;\n    } else {\n      return response\n      .then((response) => {\n        return [response, response.text()];\n      })\n      .spread((response, text) => {\n        if (response.ok) {\n          return Promise.resolve(text);\n        } else {\n          return Promise.reject(handleError(\"fileUpload\", {code: \"failure\", message: text}));\n        }\n      });\n    }\n  }\n\n  /**\n   * Move resource from one folder to another. Requires write permission on the resource, the\n   * source parent and the target parent resources.\n   * @param  {string} id - the id of the resource to move.\n   * @param  {string} fromParentId - the current parent resource to move from.\n   * @param  {string} toParentId - the target folder resource to move to.\n   */\n  moveResource(id, fromParentId, toParentId) {\n    const request = buildCommandRequest.call(this, \"resource/move\", {id, fromParentId, toParentId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.moveResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"moveResource\"));\n  }\n\n  /**\n   * Resets the resource index. This involves deleting existing indexes and rebuilding them. May take\n   * a while depending on the size of any associated dataset and the number and complexity of indexes.\n   * @param  {string} resourceId - the id of the resource, requires write permission.\n   */\n  rebuildResourceIndex(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/index/rebuild\", {id: resourceId});\n    let result;\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.rebuildResourceIndex: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"rebuildIndex\"))\n      .then((res) => {\n        result = res;\n        return waitForIndex.call(this, result.response.id, \"built\");\n      })\n      .then(() => {\n        return result;\n      });\n  }\n\n  /**\n   * Removes access for an account to a resource. Permission is required\n   * equivalent to that which is being added, e.g. adding write permission requires existing\n   * write access.\n   * @param  {string} resourceId - The resource id.\n   * @param  {string} accountId - The account id to remove access from.\n   * @param  {string} addedBy - The account id that originally added the access, probably your\n   * account id.\n   * @param  {string} sourceId - The source of the access, usually the resource itself.\n   * @param  {string[]} access - The access, one or more of [`\"r\"`, `\"w\"`].\n   */\n  removeResourceAccess(resourceId, accountId, addedBy, sourceId, access) {\n    const request = buildCommandRequest.call(this, \"resourceAccess/delete\", {\n      rid: resourceId,\n      aid: accountId,\n      by: addedBy,\n      src: sourceId,\n      acc: access,\n    });\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.removeResourceAccess: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"removeResourceAccess\"));\n  }\n\n  /**\n   * Set the resource schema.\n   * @param  {string} resourceId - The id of the dataset-based resource.\n   * @param  {object} schema - The new schema definition. TODO - document\n   * @return  {CommandResult}\n   */\n  setResourceSchema(resourceId, schema) {\n    const request = buildCommandRequest.call(this, \"resource/schema/set\", {id: resourceId, schema});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceSchema: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"setResourceSchema\"));\n  }\n\n  /**\n   * Set the share mode for a resource.\n   * @param  {string} resourceId - The resource id.\n   * @param  {string} shareMode - The share mode to set, one or [`\"pw\"`, `\"pr\"`, `\"tr\"`] corresponding to\n   * 'public read/write', 'public read, trusted write', 'trusted only'.\n   */\n  setResourceShareMode(resourceId, shareMode) {\n    const request = buildCommandRequest.call(this, \"resource/setShareMode\", {id: resourceId, shareMode});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceShareMode: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"setResourceShareMode\"));\n  }\n\n  /**\n   * Sets the permissive share mode of the resource. Permissive share allows anybody with acces to the resource\n   * to share it with others. If a resource is not in permissive share mode, only the resource owner\n   * can share it with others.\n   * @param  {string} resourceId - The resource id.\n   * @param  {bool} allowPermissive - The required permissive share mode.\n   */\n  setResourcePermissiveShare(resourceId, allowPermissive) {\n    const request = buildCommandRequest.call(this, \"resource/setPermissiveShare\", {\n      id: resourceId,\n      permissiveShare: allowPermissive ? \"r\" : \"\",\n    });\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourcePermissiveShare: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"setResourcePermissiveShare\"));\n  }\n\n  /**\n   * Suspends the resource index. This involves deleting any existing indexes. Requires write permission. When\n   * a resource index is in `suspended` status, it is not possible to run any queries or updates against\n   * the resource.\n   * @param  {string} resourceId - the id of the resource. Requires write permission.\n   */\n  suspendResourceIndex(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/index/suspend\", {id: resourceId});\n    let result;\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.suspendResourceIndex: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"suspendIndex\"))\n      .then((res) => {\n        result = res;\n        return waitForIndex.call(this, result.response.id, \"suspended\");\n      })\n      .then(() => {\n        return result;\n      });\n  }\n\n  /**\n   * Removes all data from the resource. Applicable to dataset-based resources only. This can not be\n   * undone.\n   * @param  {string} resourceId - The resource id to truncate.\n   */\n  truncateResource(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/truncate\", {id: resourceId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.truncateResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"truncateResource\"));\n  }\n\n  /**\n   * Modify one or more of the meta data associated with the resource.\n   * @param  {string} resourceId - id of the resource to update\n   * @param  {object} update - object containing the properties to update. Can be one or more of those\n   * listed below. See the {@link TDXApi#addResource} method for semantics and syntax of each property.\n   * @param  {string} [update.derived]\n   * @param  {string} [update.description]\n   * @param  {string} [update.meta]\n   * @param  {string} [update.name]\n   * @param  {string} [update.provenance]\n   * @param  {string} [update.schema]\n   * @param  {string} [update.tags]\n   */\n  updateResource(resourceId, update) {\n    const request = buildCommandRequest.call(this, \"resource/update\", {id: resourceId, ...update});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"updateResource\"));\n  }\n\n  /*\n   *\n   *  RESOURCE DATA COMMANDS\n   *\n   */\n\n   /**\n   * Add data to a dataset resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to add data to.\n   * @param  {object|array} data - The data to add. Must conform to the schema defined by the resource metadata.\n   * Supports creating an individual document or many documents.\n   * @example <caption>create an individual document</caption>\n   * // Assumes the dataset primary key is 'lsoa'\n   * tdxApi.addData(myDatasetId, {lsoa: \"E0000001\", count: 398});\n   * @example <caption>create multiple documents</caption>\n   * tdxApi.addData(myDatasetId, [\n   *  {lsoa: \"E0000001\", count: 398},\n   *  {lsoa: \"E0000002\", count: 1775},\n   *  {lsoa: \"E0000005\", count: 4533},\n   * ]);\n   */\n  addData(datasetId, data) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/createMany\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addData\"));\n  }\n\n  /**\n   * Deletes data from a dataset-based resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to delete data from.\n   * @param  {object|array} data - The primary key data to delete.\n   */\n  deleteData(datasetId, data) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/deleteMany\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteData\"));\n  }\n\n  /**\n   * Deletes data from a dataset-based resource using a query to specify the documents to be deleted.\n   * @param  {string} datasetId - The id of the dataset-based resource to delete data from.\n   * @param  {object} query - The query that specifies the data to delete. All documents matching the\n   * query will be deleted.\n   * @example\n   * // Delete all documents with English lsoa.\n   * tdxApi.deleteDataByQuery(myDatasetId, {lsoa: {$regex: \"E*\"}});\n   */\n  deleteDataByQuery(datasetId, query) {\n    const postData = {\n      datasetId,\n      query: JSON.stringify(query),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/deleteQuery\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteDataByQuery: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteDataByQuery\"));\n  }\n\n  /**\n   * Patches data in a dataset resource. Uses the [JSON patch](https://tools.ietf.org/html/rfc6902) format,\n   * which involves defining the primary key data followed by a flexible update specification.\n   * @param  {string} datasetId - The id of the dataset-based resource to update.\n   * @param  {object} data - The patch definition.\n   * @param  {object|array} data.__update - An array of JSON patch specifications.\n   * @example <caption>patch a single value in a single document</caption>\n   * tdxApi.patchData(myDatasetId, {lsoa: \"E000001\", __update: [{p: \"count\", m: \"r\", v: 948}]});\n   * @example <caption>patch a more than one value in a single document</caption>\n   * tdxApi.patchData(myDatasetId, {lsoa: \"E000001\", __update: [\n   *   {p: \"count\", m: \"r\", v: 948}\n   *   {p: \"modified\", m: \"a\", v: Date.now()}\n   * ]});\n   */\n  patchData(datasetId, data) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/upsertMany\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.patchData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"patchData\"));\n  }\n\n  /**\n   * Updates data in a dataset resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to update.\n   * @param  {object|array} data - The data to update. Must conform to the schema defined by the resource metadata.\n   * Supports updating individual or multiple documents.\n   * @param  {bool} [upsert=false] - Indicates the data should be created if no document is found matching the\n   * primary key.\n   * @return {CommandResult} - Use the result property to check for errors.\n   * @example <caption>update an existing document</caption>\n   * tdxApi.updateData(myDatasetId, {lsoa: \"E000001\", count: 488});\n   * @example <caption>upsert a document</caption>\n   * // Will create a document if no data exists matching key 'lsoa': \"E000004\"\n   * tdxApi.updateData(myDatasetId, {lsoa: \"E000004\", count: 288, true});\n   */\n  updateData(datasetId, data, upsert) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n      __upsert: !!upsert,\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/updateMany\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"updateData\"));\n  }\n\n  /**\n   * Updates data in a dataset-based resource using a query to specify the documents to be updated.\n   * @param  {string} datasetId - The id of the dataset-based resource to update data in.\n   * @param  {object} query - The query that specifies the data to update. All documents matching the\n   * query will be updated.\n   * @example\n   * // Update all documents with English lsoa, setting `count` to 1000.\n   * tdxApi.updateDataByQuery(myDatasetId, {lsoa: {$regex: \"E*\"}}, {count: 1000});\n   */\n  updateDataByQuery(datasetId, query, update) {\n    const postData = {\n      datasetId,\n      query: JSON.stringify(query),\n      update,\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/updateQuery\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateDataByQuery: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"updateDataByQuery\"));\n  }\n\n  /*\n   *\n   *  DATABOT COMMANDS\n   *\n   */\n\n  /**\n   * Deletes one or more hosts, depending on the given parameters. E.g. if just a `hostId` is given, all hosts\n   * will be deleted with that id. If an ip address is also given, all hosts with the id on that ip address will\n   * be deleted and so on. Note that hosts can only be deleted if they are in the `offline` status.\n   * @param  {object} payload - The definition of the host(s) to delete. Can be an array of objects or a single object\n   * @param  {string} payload.hostId - The id of the hosts to be deleted.\n   * @param  {string} [payload.hostIp] - The optional ip of the hosts to be deleted.\n   * @param  {number} [payload.hostPort] - The optional port number of the host to be deleted.\n   */\n  deleteDatabotHost(payload) {\n    const postData = {\n      payload,\n    };\n    const request = buildCommandRequest.call(this, \"databot/host/delete\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteDatabotHost: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteDatabotHost\"));\n  }\n\n  /**\n   * Deletes a databot instance and all output/debug data associated with it.\n   * @param  {string[]} instanceId - The id(s) of the instances to delete. Can be an array of instance ids or an\n   * individual string id\n   */\n  deleteDatabotInstance(instanceId) {\n    const postData = {\n      instanceId: [].concat(instanceId),\n    };\n    const request = buildCommandRequest.call(this, \"databot/deleteInstance\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteDatabotInstance\"));\n  }\n\n  /**\n   * Gets databot instance data for the given instance id.\n   * @param  {string} instanceId - The id of the instance to retrieve.\n   */\n  getDatabotInstance(instanceId) {\n    const request = buildDatabotInstanceRequest.call(this, instanceId);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getDatabotInstance\"));\n  }\n\n  /**\n   * Get databot instance output.\n   * @param  {string} instanceId - The instance id to retrieve output for.\n   * @param  {string} [processId] - Optional process id. If omitted, output for all instance processes will be returned.\n   */\n  getDatabotInstanceOutput(instanceId, processId) {\n    const request = buildDatabotInstanceRequest.call(this, `output/${instanceId}/${processId || \"\"}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatabotInstanceOutput: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getDatabotInstanceOutput\"));\n  }\n\n  /**\n   * Get databot instance status.\n   * @param  {string} instanceId - The id of the databot instance for which status is retrieved.\n   */\n  getDatabotInstanceStatus(instanceId) {\n    const request = buildDatabotInstanceRequest.call(this, `status/${instanceId}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatabotInstanceStatus: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getDatabotInstanceStatus\"));\n  }\n\n  /**\n   * Registers a databot host as active with the TDX.\n   * @param  {object} status - The databot host identifier payload.\n   */\n  registerDatabotHost(status) {\n    const request = buildDatabotHostRequest.call(this, \"register\", status);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.registerDatabotHost: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"registerDatabotHost\"));\n  }\n\n  /**\n   * Sends a command to a databot host. Reserved for system use.\n   * @param  {string} command - The command to send. Must be one of [\"stopHost\", \"updateHost\", \"runInstance\",\n   * \"stopInstance\", \"clearInstance\"]\n   * @param  {string} hostId - The id of the host.\n   * @param  {string} [hostIp] - The ip address of the host. If omitted, the command will be sent to all\n   * host ip addresses.\n   * @param  {number} [hostPort] - The port number of the host. If omitted, the command will be sent to\n   * all host ports.\n   */\n  sendDatabotHostCommand(command, hostId, hostIp, hostPort) {\n    const postData = {\n      hostId,\n      hostIp,\n      hostPort,\n      command,\n    };\n    const request = buildCommandRequest.call(this, \"databot/host/command\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.sendDatabotHostCommand: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"sendDatabotHostCommand\"));\n  }\n\n  /**\n   * Starts a databot instance.\n   * @param  {string} databotId - The id of the databot definition to start.\n   * @param  {object} payload - The instance input and parameters.\n   * @param  {number} [payload.authTokenTTL] - The time-to-live to use when creating the auth token, in seconds.\n   * Will default to the TDX-configured default if not given (usually 1 hour).\n   * @param  {number} [payload.chunks=1] - The number of processes to instantiate. Each will be given the same input\n   * data, with only the chunk number varying.\n   * @param  {bool} [payload.debugMode=false] - Flag indicating this instance should be run in debug mode, meaning\n   * all debug output will be captured and stored on the TDX. n.b. setting this will also restrict the hosts available\n   * to run the instance to those that are willing to run in debug mode.\n   * @param  {string} [payload.description] - The description for this instance.\n   * @param  {object} [payload.inputs] - The input data. A free-form object that should conform to the\n   * specification in the associated databot definition.\n   * @param  {string} [payload.name] - The name to associate with this instance, e.g. \"Male population\n   * projection 2017\"\n   * @param  {string} [payload.overwriteExisting] - The id of an existing instance that should be overwritten.\n   * @param  {number} [payload.priority] - The priority to assign this instance. Reserved for system use.\n   * @param  {string} payload.shareKeyId - The share key to run the databot under.\n   * @param  {string} [payload.shareKeySecret] - The secret of the share key. Ignored if the share key id refers to a\n   * user-based account.\n   */\n  startDatabotInstance(databotId, payload) {\n    const postData = {\n      databotId,\n      instanceData: payload,\n    };\n    const request = buildCommandRequest.call(this, \"databot/startInstance\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.startDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"startDatabotInstance\"));\n  }\n\n  /**\n   * Terminates or pauses a running databot instance.\n   * @param  {string} instanceId - The id of the instance to terminate or pause.\n   * @param  {string} mode - One of [`\"stop\"`, `\"pause\"`, `\"resume\"`]\n   */\n  stopDatabotInstance(instanceId, mode) {\n    const postData = {\n      instanceId,\n      mode,\n    };\n    const request = buildCommandRequest.call(this, \"databot/stopInstance\", postData);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.stopDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"stopDatabotInstance\"));\n  }\n\n  /**\n   * Updates a databot host status.\n   * @param  {object} status - The databot host status payload.\n   */\n  updateDatabotHostStatus(status) {\n    const request = buildDatabotHostRequest.call(this, \"status\", status);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateDatabotHostStatus: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"updateDatabotHostStatus\"));\n  }\n\n  /**\n   * Stores databot instance output on the TDX.\n   * @param  {object} output - The output payload for the databot instance.\n   */\n  writeDatabotHostInstanceOutput(output) {\n    const request = buildDatabotHostRequest.call(this, \"output\", output);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.writeDatabotHostInstanceOutput: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"writeDatabotHostInstanceOutput\"));\n  }\n\n  /*\n   *\n   *  ZONE CONNECTION COMMANDS\n   *\n   */\n\n  /**\n   * Adds a zone connection to a remote TDX. The details for the connection should be retrieved by a call to the\n   * certificate endpoint for the TDX, e.g. https://tdx.nqminds.com/certficate.\n   * @param  {object} options - The zone connection details\n   * @param  {string} options.owner - The owner of the zone connection. Must be the same as the authenticated account.\n   * @param  {string} options.tdxServer - The URL of the target TDX auth server, e.g. https://tdx.nqminds.com\n   * @param  {string} [options.commandServer] - The URL of the target TDX command server, e.g. https://cmd.nqminds.com\n   * @param  {string} [options.queryServer] - The URL of the target TDX query server, e.g. https://q.nqminds.com\n   * @param  {string} [options.ddpServer] - The URL of the target TDX ddp server, e.g. https://ddp.nqminds.com\n   * @param  {string} [options.databotServer] - The URL of the target TDX databot server,\n   * e.g. https://databot.nqminds.com\n   * @param  {string} [options.displayName] - The friendly name of the TDX.\n   */\n  addZoneConnection(options) {\n    const request = buildCommandRequest.call(this, \"zoneConnection/create\", options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.addZoneConnection: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addZoneConnection\"));\n  }\n\n  /**\n   * Deletes a zone connection. The authenticated account must own the zone connection.\n   * @param  {string} id - The id of the zone connection to delete.\n   */\n  deleteZoneConnection(id) {\n    const request = buildCommandRequest.call(this, \"zoneConnection/delete\", {id});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteZoneConnection: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteZoneConnection\"));\n  }\n\n  /**\n   * AUDIT COMMANDS\n   */\n\n  rollbackCommand(id) {\n    const request = buildCommandRequest.call(this, \"rollback\", {id});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.rollbackCommand: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"rollbackCommand\"));\n  }\n\n  /*\n   *\n   *  QUERIES\n   *\n   */\n\n  /**\n   * Exchanges a client user token (e.g. bound to the browser IP) for an application-user token bound to the\n   * currently authenticated token IP. The currently authenticated token ***must*** be an application token, whereby the\n   * application has been authorised by the user and the user has permission to access the application. The returned\n   * token will be bound to the same IP address as the currently authenticated token (i.e the application server IP).\n   *\n   * @param  {string} token - The users' TDX auth server token to validate.\n   * @param  {string} [ip] - The optional IP address to validate the user token against.\n   * @return  {object} - The new token application-user token, bound to the server IP.\n   */\n  exchangeTDXToken(token, ip) {\n    const request = buildQueryRequest.call(this, \"token/exchange\", {token, ip});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.exchangeTDXToken: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"exchangeTDXToken\"));\n  }\n\n  /**\n   * Streams the contents of a resource. For dataset-based resources this will stream the dataset contents in newline\n   * delimited JSON (NDJSON). For raw file resources this will stream the raw file contents (zip, raw JSON etc).\n   * @param  {string} resourceId - The id of the resource to be downloaded.\n   * @return {object} - Response object, where the response body is a stream object.\n   */\n  downloadResource(resourceId) {\n    const request = buildQueryRequest.call(this, `resource/${resourceId}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.downloadResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      });\n  }\n\n  /**\n   * Performs an aggregate query on the given dataset, returning a response object with stream in the body\n   * @param  {string} datasetId - The id of the dataset-based resource to perform the aggregate query on.\n   * @param  {object|string} pipeline - The aggregate pipeline, as defined in the\n   * [mongodb docs](https://docs.mongodb.com/manual/aggregation/). Can be given as a JSON object or as a stringified\n   * JSON object.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {object} - Response object, where the response body is a stream object.\n   */\n  getAggregateDataStream(datasetId, pipeline, ndJSON) {\n    // Convert pipeline to string if necessary.\n    if (pipeline && typeof pipeline === \"object\") {\n      pipeline = JSON.stringify(pipeline);\n    }\n    const endpoint = `datasets/${datasetId}/${ndJSON ? \"ndaggregate\" : \"aggregate\"}?pipeline=${pipeline}`;\n    const request = buildQueryRequest.call(this, endpoint);\n    return fetch.call(this, request)\n    .catch((err) => {\n      errLog(\"TDXApi.getAggregateData: %s\", err.message);\n      return Promise.reject(new Error(`${err.message} - [network error]`));\n    });\n  }\n\n  /**\n   * Performs an aggregate query on the given dataset.\n   * @param  {string} datasetId - The id of the dataset-based resource to perform the aggregate query on.\n   * @param  {object|string} pipeline - The aggregate pipeline, as defined in the\n   * [mongodb docs](https://docs.mongodb.com/manual/aggregation/). Can be given as a JSON object or as a stringified\n   * JSON object.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {DatasetData}\n   */\n  getAggregateData(datasetId, pipeline, ndJSON) {\n    return this.getAggregateDataStream(datasetId, pipeline, ndJSON)\n      .then(checkResponse.bind(null, \"getAggregateData\"));\n  }\n\n  /**\n   * Gets details of the currently authenticated account.\n   * @return  {object} - Details of the authenticated account.\n   */\n  getAuthenticatedAccount() {\n    const request = buildQueryRequest.call(this, \"auth-account\");\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getAuthenticatedAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getAuthenticatedAccount\"));\n  }\n\n  /**\n   * Gets all data from the given dataset that matches the filter provided and returns a response object with stream\n   * in the body.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {object} - Response object, where the response body is a stream object.\n   */\n  getDataStream(datasetId, filter, projection, options, ndJSON) {\n    const endpoint = `datasets/${datasetId}/${ndJSON ? \"nddata\" : \"data\"}`;\n    const request = buildQueryRequest.call(this, endpoint, filter, projection, options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDataStream: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      });\n  }\n\n  /**\n   * Gets all data from the given dataset that matches the filter provided.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {DatasetData}\n   */\n  getData(datasetId, filter, projection, options, ndJSON) {\n    return this.getDataStream(datasetId, filter, projection, options, ndJSON)\n      .then(checkResponse.bind(null, \"getData\"));\n  }\n\n  /**\n   * [DEPRECATED] - use getDataStream\n   * Gets all data from the given dataset that matches the filter provided and returns a response object with stream\n   * in the body.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {object} - Response object, where the response body is a stream object.\n   */\n  getDatasetDataStream(datasetId, filter, projection, options, ndJSON) {\n    return this.getDataStream(datasetId, filter, projection, options, ndJSON);\n  }\n\n  /**\n   * [DEPRECATED] - use getData\n   * Gets all data from the given dataset that matches the filter provided.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @param  {bool} [ndJSON] - If set, the data is sent in [newline delimited json format](http://ndjson.org/).\n   * @return  {DatasetData}\n   */\n  getDatasetData(datasetId, filter, projection, options, ndJSON) {\n    return this.getData(datasetId, filter, projection, options, ndJSON);\n  }\n\n  /**\n   * Gets a count of the data in a dataset-based resource, after applying the given filter.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - An optional mongodb filter to apply before counting the data.\n   */\n  getDatasetDataCount(datasetId, filter) {\n    const request = buildQueryRequest.call(this, `datasets/${datasetId}/count`, filter);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatasetDataCount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getDatasetDataCount\"));\n  }\n\n  /**\n   * Gets a list of distinct values for a given property in a dataset-based resource.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {string} key - The name of the property to use. Can be a property path, e.g. `\"address.postcode\"`.\n   * @param  {object} [filter] - An optional mongodb filter to apply.\n   * @return  {object[]} - The distinct values.\n   */\n  getDistinct(datasetId, key, filter, projection, options) {\n    const request = buildQueryRequest.call(this, `datasets/${datasetId}/distinct?key=${key}`, filter, projection, options); // eslint-disable-line max-len\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDistinct: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getDistinct\"));\n  }\n\n  /**\n   * Gets the details for a given resource id.\n   * @param  {string} resourceId - The id of the resource to retrieve.\n   * @param  {bool} [noThrow=false] - If set, the call won't reject or throw if the resource doesn't exist.\n   * @return  {Resource}\n   * @exception  Will throw if the resource is not found (see `noThrow` flag) or permission is denied.\n   */\n  getResource(resourceId, noThrow) {\n    const request = buildQueryRequest.call(this, `resources/${resourceId}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then((response) => {\n        if (noThrow) {\n          // If noThrow specified, return null if there is an error fetching the resource, rather than throwing.\n          if (response.ok) {\n            return response.json();\n          } else if (response.status === 404) {\n            return null;\n          } else {\n            return checkResponse(\"getResource\", response);\n          }\n        } else {\n          return checkResponse(\"getResource\", response);\n        }\n      });\n  }\n\n  /**\n   * Gets all access the authenticated account has to the given resource id.\n   * @param  {string} resourceId - The id of the resource whose access is to be retrieved.\n   * @return {object[]} - Array of access objects.\n   */\n  getResourceAccess(resourceId, filter, projection, options) {\n    const request = buildQueryRequest.call(this, `resources/${resourceId}/access`, filter, projection, options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getResourceAccess: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then((response) => {\n        return checkResponse(\"getResourceAccess\", response);\n      });\n  }\n\n  /**\n   * Gets all resources that are ancestors of the given resource.\n   * @param  {string} resourceId - The id of the resource whose parents are to be retrieved.\n   * @return  {Resource[]}\n   */\n  getResourceAncestors(resourceId) {\n    const request = buildQueryRequest.call(this, `datasets/${resourceId}/ancestors`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatasetAncestors: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getResourceAncestors\"));\n  }\n\n  /**\n   * Gets the details of all resources that match the given filter.\n   * @param  {object} [filter] - A mongodb filter definition\n   * @param  {object} [projection] - A mongodb projection definition, can be used to restrict which properties are\n   * returned thereby limiting the payload.\n   * @param  {object} [options] - A mongodb options definition, can be used for limit, skip, sorting etc.\n   * @return  {Resource[]}\n   */\n  getResources(filter, projection, options) {\n    const request = buildQueryRequest.call(this, \"resources\", filter, projection, options);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getResources\"));\n  }\n\n  /**\n   * Retrieves all resources that have an immediate ancestor of the given schema id.\n   * @param  {string} schemaId - The id of the schema to match, e.g. `\"geojson\"`.\n   * @return  {Resource[]}\n   */\n  getResourcesWithSchema(schemaId) {\n    const filter = {\"schemaDefinition.parent\": schemaId};\n    return this.getResources(filter);\n  }\n\n  /**\n   * Retrieves an authorisation token for the given TDX instance\n   * @param  {string} tdx - The TDX instance name, e.g. `\"tdx.acme.com\"`.\n   * @return  {string}\n   */\n  getTDXToken(tdx) {\n    const request = buildQueryRequest.call(this, `tdx-token/${tdx}`);\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getTDXToken: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getTDXToken\"));\n  }\n\n  /**\n   * Gets the details for a given zone (account) id.\n   * @param  {string} accountId - the id of the zone to be retrieved.\n   * @return  {Zone} zone\n   */\n  getZone(accountId) {\n    const request = buildQueryRequest.call(this, \"zones\", {username: accountId});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.getZone: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getZone\"))\n      .then((zoneList) => {\n        return zoneList && zoneList.length ? zoneList[0] : null;\n      });\n  }\n\n  /**\n   * Validates the given token was signed by this TDX, and returns the decoded token data.\n   * @param  {string} token - The TDX auth server token to validate.\n   * @param  {string} [ip] - The optional IP address to validate against.\n   * @return  {object} - The decoded token data.\n   */\n  validateTDXToken(token, ip) {\n    const request = buildQueryRequest.call(this, \"token/validate\", {token, ip});\n    return fetch.call(this, request)\n      .catch((err) => {\n        errLog(\"TDXApi.validateTDXToken: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"validateTDXToken\"));\n  }\n}\n\nexport default TDXApi;\n\n\n\n// WEBPACK FOOTER //\n// ./src/api-tdx.js","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@nqminds/isomorphic-fetch\"\n// module id = 4\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}