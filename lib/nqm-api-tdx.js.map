{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 09333acdaea5aad3db6f","webpack:///external \"debug\"","webpack:///./src/helpers.js","webpack:///external \"base-64\"","webpack:///external \"isomorphic-fetch\"","webpack:///./src/api-tdx.js"],"names":["pollingRetries","pollingInterval","waitInfinitely","TDXApiError","message","stack","name","Error","prototype","Object","create","constructor","handleError","source","failure","code","internal","from","JSON","stringify","buildCommandRequest","command","data","contentType","async","commandMode","Request","config","commandHost","method","mode","headers","Headers","accessToken","body","buildQueryRequest","endpoint","filter","projection","options","query","indexOf","queryHost","checkResponse","response","json","then","ok","Promise","resolve","error","error_description","reject","status","setDefaults","log","tdxHost","protocolComponents","split","length","protocol","hostComponents","hostname","slice","join","databotHost","waitForResource","resourceId","check","retryCount","maxRetries","getResource","resource","checkResult","setTimeout","call","catch","err","parseError","parse","parseEx","waitForIndex","datasetId","initialStatus","builtIndexCheck","dataset","indexStatus","continueWaiting","Math","min","errLog","TDXApi","id","secret","ttl","credentials","encodeURIComponent","encode","uri","request","grant_type","accessTokenTTL","bind","result","access_token","username","approved","key","verified","wait","accountId","sourceId","access","rid","aid","src","acc","concat","resourceIdList","payload","file","stream","size","text","spread","fromParentId","toParentId","res","addedBy","by","schema","shareMode","allowPermissive","permissiveShare","update","postData","upsert","__upsert","instanceId","hostId","hostIp","hostPort","databotId","instanceData","noThrow","schemaId","getResources","tdx"],"mappings":"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","file":"nqm-api-tdx.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"debug\"), require(\"base-64\"), require(\"isomorphic-fetch\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"nqm-api-tdx\", [\"debug\", \"base-64\", \"isomorphic-fetch\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nqm-api-tdx\"] = factory(require(\"debug\"), require(\"base-64\"), require(\"isomorphic-fetch\"));\n\telse\n\t\troot[\"nqm-api-tdx\"] = factory(root[\"debug\"], root[\"base-64\"], root[\"isomorphic-fetch\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 09333acdaea5aad3db6f","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 0\n// module chunks = 0","import debug from \"debug\";\n\nconst pollingRetries = 15;\nconst pollingInterval = 1000;\nconst waitInfinitely = -1;\n\nconst TDXApiError = function(message, stack) {\n  this.name = \"TDXApiError\";\n  this.message = message || \"no message given\";\n  this.stack = stack || (new Error()).stack;\n};\n\nTDXApiError.prototype = Object.create(Error.prototype);\nTDXApiError.prototype.constructor = TDXApiError;\n\nconst handleError = function(source, failure, code) {\n  const internal = {\n    from: source,\n    failure: JSON.stringify(failure),\n    code: typeof code === \"undefined\" ? \"n/a\" : code,\n  };\n  return new TDXApiError(JSON.stringify(internal), (new Error()).stack);\n};\n\n/**\n * Builds a Request object for the given command bound to the TDX command service.\n * @param  {string} command - the target TDX command, e.g. \"resource/create\"\n * @param  {object} data - the command payload\n * @param  {string} [contentType=application/json] - the content type\n * @param  {bool} [noSync=false] - send command asynchronously\n */\nconst buildCommandRequest = function(command, data, contentType, async) {\n  const commandMode = async ? \"command\" : \"commandSync\";\n  contentType = contentType || \"application/json\";\n  return new Request(`${this.config.commandHost}/${commandMode}/${command}`, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: new Headers({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": contentType,\n    }),\n    body: JSON.stringify(data),\n  });\n};\n\n/**\n * Builds a Request object for the given query bound to the TDX query engine.\n * @param  {string} endpoint - the query endpoint, e.g. \"resources/DKJF8d8f\"\n * @param  {object} [filter] - a filter expression, e.g. {\"temperature\": {$gt: 18}}\n * @param  {object} [projection] - a projection definition defining what data will be returned, e.g. {sensorId: 1,\n * temperature: 1}\n * @param  {object} [options] - query options, e.g. {limit: 10, sort: {timestamp: -1}}\n */\nconst buildQueryRequest = function(endpoint, filter, projection, options) {\n  filter = filter ? JSON.stringify(filter) : \"\";\n  projection = projection ? JSON.stringify(projection) : \"\";\n  options = options ? JSON.stringify(options) : \"\";\n  let query;\n  if (endpoint.indexOf(\"?\") < 0) {\n    // There is no query portion in the prefix - add one now.\n    query = `${endpoint}?filter=${filter}&proj=${projection}&opts=${options}`;\n  } else {\n    // There is already a query portion, so append the params.\n    query = `${endpoint}&filter=${filter}&proj=${projection}&opts=${options}`;\n  }\n  return new Request(`${this.config.queryHost}${query}`, {\n    method: \"GET\",\n    mode: \"cors\",\n    headers: new Headers({\n      \"Authorization\": `Bearer ${this.accessToken}`,\n      \"Content-Type\": \"application/json\",\n    }),\n  });\n};\n\nconst checkResponse = function(source, response) {\n  return response.json()\n    .then((json) => {\n      if (response.ok) {\n        return Promise.resolve(json);\n      } else {\n        if (json.error) {\n          // Build a failure object from the json response.\n          const failure = {code: json.error, message: json.error_description};\n          return Promise.reject(handleError(source, failure, response.status));\n        } else {\n          // The response body holds the error details.\n          return Promise.reject(handleError(source, json, response.status));\n        }\n      }\n    });\n};\n\nconst setDefaults = function(config) {\n  const log = debug(\"nqm-api-tdx:setDefaults\");\n  if (config.tdxHost && (!config.queryHost || !config.commandHost)) {\n    const protocolComponents = config.tdxHost.split(\"://\");\n    if (protocolComponents.length !== 2) {\n      throw new Error(`invalid tdxHost in config - no protocol: ${config.tdxHost}`);\n    }\n    const protocol = protocolComponents[0];\n    const hostComponents = protocolComponents[1].split(\".\");\n    if (hostComponents.length < 3) {\n      throw new Error(`invalid tdxHost in config - expected sub.domain.tld: ${config.tdxHost}`);\n    }\n    const hostname = hostComponents.slice(1).join(\".\");\n    config.commandHost = config.commandHost || `${protocol}://cmd.${hostname}`;\n    config.queryHost = config.queryHost || `${protocol}://q.${hostname}/v1/`;\n    config.databotHost = config.databotHost || `${protocol}://databot.${hostname}`;\n    log(\n      \"defaulted hosts to %s, %s, %s\",\n      config.commandHost,\n      config.queryHost,\n      config.databotHost\n    );\n  }\n};\n\nconst waitForResource = function(resourceId, check, retryCount, maxRetries) {\n  const log = debug(\"nqm-api-tdx:waitForResource\");\n  retryCount = retryCount || 0;\n  return this.getResource(resourceId)\n    .then((resource) => {\n      const checkResult = check(resource, retryCount);\n      if (checkResult instanceof Error) {\n        log(\"waitForResource - check failed with error [%s]\", checkResult.message);\n        return Promise.reject(checkResult);\n      }\n\n      if (!checkResult) {\n        // A negative maxRetries value will retry indefinitely.\n        if (maxRetries >= 0 && retryCount > maxRetries) {\n          log(\"giving up after %d attempts\", retryCount);\n          return Promise.reject(new Error(`gave up waiting for ${resourceId} after ${retryCount} attempts`));\n        }\n\n        // Try again after a delay.\n        log(\"waiting for %d msec\", pollingInterval);\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            log(\"trying again\");\n            resolve(waitForResource.call(this, resourceId, check, retryCount + 1, maxRetries));\n          }, pollingInterval);\n        });\n      } else {\n        return resource;\n      }\n    })\n    .catch((err) => {\n      if (err.name !== \"TDXApiError\") {\n        return Promise.reject(err);\n      } else {\n        try {\n          const parseError = JSON.parse(err.message);\n          const failure = JSON.parse(parseError.failure);\n          if (failure.code === \"NotFoundError\" || failure.code === \"UnauthorizedError\") {\n            // Ignore resource not found and not authorized errors here, they are probably caused by\n            // waiting for the projections to catch up (esp. in debug environments) by falling through\n            // we will still be limited by the retry count, so won't loop forever.\n            log(\"ignoring error %s\", err.message);\n            return new Promise((resolve) => {\n              setTimeout(() => {\n                resolve(waitForResource.call(this, resourceId, check, retryCount + 1, maxRetries));\n              }, pollingInterval);\n            });\n          } else {\n            // All other errors are fatal.\n            return Promise.reject(err);\n          }\n        } catch (parseEx) {\n          // Failed to parse TDX error - re-throw the original error.\n          log(\"failure: [%s]\", parseEx.message);\n          return Promise.reject(err);\n        }\n      }\n    });\n};\n\nconst waitForIndex = function(datasetId, status, maxRetries) {\n  const log = debug(\"nqm-api-tdx:waitForIndex\");\n\n  // The argument maxRetries is optional.\n  if (typeof maxRetries === \"undefined\") {\n    maxRetries = waitInfinitely;\n  }\n  status = status || \"built\";\n\n  let initialStatus = \"\";\n\n  const builtIndexCheck = function(dataset, retryCount) {\n    log(\"builtIndexCheck: %s\", dataset ? dataset.indexStatus : \"no dataset\");\n\n    let continueWaiting;\n\n    // Handle \"error\" index status.\n    if (dataset && dataset.indexStatus === \"error\") {\n      if (!initialStatus) {\n        // Haven't got an initial status yet, so can't make a judgment as to whether or not the error status\n        // is new, or the index was already in an error state.\n        continueWaiting = true;\n      } else if (initialStatus !== \"error\") {\n        // The index status has transitioned from non-error to error => abort\n        continueWaiting = new Error(\"index entered error status\");\n      } else {\n        // The index status started as an error and is still an error => allow a limited number of retries\n        // irrespective of the requested maxRetries.\n        if (retryCount > Math.min(maxRetries, pollingRetries)) {\n          continueWaiting = new Error(`index still in error status after ${retryCount} retries`);\n        } else {\n          continueWaiting = true;\n        }\n      }\n    } else {\n      continueWaiting = !!dataset && dataset.indexStatus === status;\n    }\n\n    // Cache the first index status we see.\n    if (dataset && !initialStatus) {\n      initialStatus = dataset.indexStatus;\n    }\n\n    return continueWaiting;\n  };\n\n  return waitForResource.call(this, datasetId, builtIndexCheck, 0, maxRetries);\n};\n\nexport {\n  buildCommandRequest,\n  buildQueryRequest,\n  checkResponse,\n  handleError,\n  setDefaults,\n  TDXApiError,\n  waitForIndex,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"base-64\"\n// module id = 2\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"isomorphic-fetch\"\n// module id = 3\n// module chunks = 0","import fetch from \"isomorphic-fetch\";\nimport base64 from \"base-64\";\nimport debug from \"debug\";\nimport {\n  buildCommandRequest,\n  buildQueryRequest,\n  checkResponse,\n  handleError,\n  setDefaults,\n  waitForIndex,\n} from \"./helpers\";\n\nconst log = debug(\"nqm-api-tdx\");\nconst errLog = debug(\"nqm-api-tdx:error\");\n\n/**\n * @typedef  {object} CommandResult\n * @property  {string} commandId - The auto-generated unique id of the command.\n * @property  {object|string} response - The result of the command. If a command is sent asynchronously, this will\n * simply be the string `\"ack\"`. In synchronous mode, this will usually be an object consisting of the primary key\n * of the data that was affected by the command.\n */\n\n/**\n * @typedef  {object} DatasetData\n * @property  {object} metaData - The dataset metadata (see `nqmMeta` option in `getDatasetData`).\n * @property  {string} metaDataUrl - The URL to the dataset metadata (see `nqmMeta` option in `getDatasetData`.\n * @property  {object[]} data - The dataset documents.\n */\n\n/**\n * @typedef  {object} Resource\n * @property  {string} description\n * @property  {string} id\n * @property  {string} name\n * @property  {string[]} parents\n * @property  {object} schemaDefinition\n * @property  {string[]} tags\n */\n\n/**\n * @typedef  {object} Zone\n * @property  {string} accountType\n * @property  {string} displayName\n * @property  {string} username\n */\n\nclass TDXApi {\n  /**\n   * Create a TDXApi instance\n   * @param  {object} config - the TDX configuration for the remote TDX\n   * @param  {string} [config.tdxHost] - the URL of the TDX auth server, e.g. https://tdx.nqminds.com. Usually this\n   * is the only host parameter needed, as long as the target TDX conforms to the standard service naming conventions\n   * e.g. https://[service].[tdx-domain].com. In this case the individual service hosts can be derived from the tdxHost\n   * name. Optionally, you can specify each individual service host (see below). Note you only need to provide the host\n   * for services you intend to use. For example, if you only need query services, just provide the query host.\n   * @param  {string} [config.commandHost] - the URL of the TDX command service, e.g. https://cmd.nqminds.com\n   * @param  {string} [config.queryHost] - the URL of the TDX query service, e.g. https://q.nqminds.com\n   * @param  {string} [config.databotHost] - the URL of the TDX databot service, e.g. https://databot.nqminds.com\n   * @param  {string} [config.accessToken] - an access token that will be used to authorise commands and queries.\n   * Alternatively you can use the authenticate method to acquire a token.\n   * @example <caption>standard usage</caption>\n   * import TDXApi from \"nqm-api-tdx\";\n   * const api = new TDXApi({tdxHost: \"tdx.acme.com\"});\n   */\n  constructor(config) {\n    this.config = config;\n    this.accessToken = config.accessToken || \"\";\n    setDefaults(this.config);\n  }\n\n  /**\n   * Authenticates with the TDX, acquiring an authorisation token.\n   * @param  {string} id - the account id, or a pre-formed credentials string, e.g. \"DKJG8dfg:letmein\"\n   * @param  {string} secret - the account secret\n   * @param  {number} [ttl=3600] - the Time-To-Live of the token in seconds, default is 1 hour.\n   * @return  {string} The access token.\n   * @exception Will throw if credentials are invalid or there is a network error contacting the TDX.\n   * @example <caption>authenticate using a share key and secret</caption>\n   * tdxApi.authenticate(\"DKJG8dfg\", \"letmein\");\n   * @example <caption>authenticate using custom ttl of 2 hours</caption>\n   * tdxApi.authenticate(\"DKJG8dfg\", \"letmein\", 7200);\n   */\n  authenticate(id, secret, ttl) {\n    let credentials;\n\n    if (typeof secret !== \"string\") {\n      // Assume the first argument is a pre-formed credentials string\n      credentials = id;\n      ttl = secret;\n    } else {\n      // uri-encode the username and concatenate with secret.\n      credentials = `${encodeURIComponent(id)}:${secret}`;\n    }\n\n    // Authorization headers must be base-64 encoded.\n    credentials = base64.encode(credentials);\n\n    // We can get a token from any of the TDX services - use the first one we find to build a fetch Request.\n    const uri = `${this.config.tdxHost || this.config.commandHost || this.config.queryHost}/token`;\n    const request = new Request(uri, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: new Headers({\n        \"Authorization\": `Basic ${credentials}`,\n        \"Content-Type\": \"application/json\",\n      }),\n      body: JSON.stringify({grant_type: \"client_credentials\", ttl: ttl || this.config.accessTokenTTL || 3600}),\n    });\n\n    return fetch(request)\n      .then(checkResponse.bind(null, \"authenticate\"))\n      .then((result) => {\n        log(result);\n        this.accessToken = result.access_token;\n        return this.accessToken;\n      })\n      .catch((err) => {\n        errLog(`error: ${err.message}`);\n        return Promise.reject(err);\n      });\n  }\n\n  /*\n   *\n   *  ACCOUNT COMMANDS\n   *\n   */\n\n  /**\n   * Adds an account to the TDX. An account can be an e-mail based user account, a share key (token) account,\n   * a databot host, an application, or an account-set (user group).\n   * @param  {object} options - new account options\n   * @param  {string} options.accountType - the type of account, one of [\"user\", \"token\"]\n   * @param  {bool} [options.approved] - account is pre-approved (reserved for system use only)\n   * @param  {string} [options.authService] - the authentication type, one of [\"local\", \"oauth:google\",\n   * \"oauth:github\"]. Required for user-based accounts. Ignored for non-user accounts.\n   * @param  {string} [options.displayName] - the human-friendly display name of the account, e.g. \"Toby's share key\"\n   * @param  {number} [options.expires] - a timestamp at which the account expires and will no longer be granted a\n   * token\n   * @param  {string} [options.key] - the account secret. Required for all but oauth-based account types.\n   * @param  {string} [options.owner] - the owner of the account.\n   * @param  {bool} [options.scratchAccess] - indicates this account can create resources in the owners scratch\n   * folder. Ignored for all accounts except share key (token) accounts. Is useful for databots that need to create\n   * intermediate or temporary resources without specifying a parent resource - if no parent resource is given\n   * when a resource is created and scratch access is enabled, the resource will be created in the owner's scratch\n   * folder.\n   * @param  {object} [options.settings] - free-form JSON object for user data.\n   * @param  {string} [options.username] - the username of the new account. Required for user-based accounts, and\n   * should be the account e-mail address. Can be omitted for non-user accounts, and will be auto-generated.\n   * @param  {bool} [options.verified] - account is pre-verified (reserved for system use only)\n   * @param  {string[]} [options.whitelist] - a list of IP addresses. Tokens will only be granted if the requesting\n   * IP address is in this list\n   * @return  {CommandResult}\n   */\n  addAccount(options) {\n    const request = buildCommandRequest.call(this, \"account/create\", options);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.addAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addAccount\"));\n  }\n\n  /**\n   * Set account approved status. Reserved for system use.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {bool} approved - account approved status\n   */\n  approveAccount(username, approved) {\n    const request = buildCommandRequest.call(this, \"account/approve\", {username, approved});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.approveAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"approveAccount\"));\n  }\n\n  /**\n   * Delete an account\n   * @param  {string} username - the full TDX identity of the account to delete.\n   */\n  deleteAccount(username) {\n    const request = buildCommandRequest.call(this, \"account/delete\", {username});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteAccount\"));\n  }\n\n  /**\n   * Change account secret.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {string} key - the new secret\n   */\n  resetAccount(username, key) {\n    const request = buildCommandRequest.call(this, \"account/reset\", {username, key});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.resetAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"resetAccount\"));\n  }\n\n  /**\n   * Updates account details. All update properties are optional. See createAccount for full details of\n   * each option.\n   * @param  {string} username - the full TDX identity of the account to update.\n   * @param  {object} options - the update options\n   * @param  {string} [options.displayName]\n   * @param  {string} [options.key]\n   * @param  {bool} [options.scratchAccess]\n   * @param  {object} [options.settings]\n   * @param  {string[]} [options.whitelist]\n   */\n  updateAccount(username, options) {\n    const request = buildCommandRequest.call(this, \"account/update\", {username, ...options});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addAccount\"));\n  }\n\n  /**\n   * Set account verified status. Reserved for system use.\n   * @param  {string} username - the full TDX identity of the account.\n   * @param  {bool} approved - account verified status\n   */\n  verifyAccount(username, verified) {\n    const request = buildCommandRequest.call(this, \"account/verify\", {username, verified});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.verifyAccount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"verifyAccount\"));\n  }\n\n  /*\n   *\n   *  RESOURCE COMMANDS\n   *\n   */\n\n  /**\n   * Adds a data exchange to the list of trusted exchanges known to the current TDX.\n   * @param  {object} options\n   * @param  {string} options.owner - the account on this TDX to which the trust relates,\n   * e.g. `bob@mail.com/tdx.acme.com`\n   * @param  {string} options.targetServer - the TDX to be trusted, e.g. `tdx.nqminds.com`\n   * @param  {string} options.targetOwner - the account on the target TDX that is trusted,\n   * e.g. `alice@mail.com/tdx.nqminds.com`.\n   */\n  addTrustedExchange(options) {\n    const request = buildCommandRequest.call(this, \"trustedConnection/create\", options);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.addTrustedExchange: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addTrustedExchange\"));\n  }\n\n  /**\n   * Adds a resource to the TDX.\n   * @param  {object} options - details of the resource to be added.\n   * @param  {string} [options.basedOnSchema=dataset] - the id of the schema on which this resource will be based.\n   * @param  {object} [options.derived] - definition of derived filter, implying this resource is a view on an existing\n   * dataset.\n   * @param  {object} [options.derived.filter] - the (read) filter to apply, in mongodb query format,\n   * e.g. `{\"temperature\": {\"$gt\": 15}}` will mean that only data with a temperature value greater than 15 will be\n   * available in this view. The filter can be any arbitrarily complex mongodb query. Use the placeholder\n   * `\"@@_identity_@@\"` to indicate that the identity of the currently authenticated user should be substituted.\n   * For example, if the user `bob@acme.com/tdx.acme.com` is currently authenticated, a filter of `{\"username\":\n   *  \"@@_identity_@@\"}` will resolve at runtime to `{\"username\": \"bob@acme.com/tdx.acme.com\"}`.\n   * @param  {object} [options.derived.projection] - the (read) projection to apply, in mongodb projection format,\n   * e.g. `{\"timestamp\": 1, \"temperature\": 1}` implies only the 'timestamp' and 'temperature' properties will be\n   * returned.\n   * @param  {string} [options.derived.source] - the id of the source dataset on which to apply the filters and\n   * projections.\n   * @param  {object} [options.derived.writeFilter] - the write filter to apply, in mongodb query format. This\n   * controls what data can be written to the underlying source dataset. For example, a write filter of\n   * `{\"temperature\": {\"$lt\": 40}}` means that attempts to write a temperature value greater than or equal to `40`\n   * will fail. The filter can be any arbitrarily complex mongodb query.\n   * @param  {object} [options.derived.writeProjection] - the write projection to apply, in mongodb projection format.\n   * This controls what properties can be written to the underlying dataset. For example, a write projection of\n   * `{\"temperature\": 1}` means that only the temperature field can be written, and attempts to write data to other\n   * properties will fail. To allow a view to create new data in the underlying dataset, the primary key fields\n   * must be included in the write projection.\n   * @param  {string} [options.description] - a description for the resource.\n   * @param  {string} [options.id] - the requested ID of the new resource. Must be unique. Will be auto-generated if\n   * omitted (recommended).\n   * @param  {string} options.name - the name of the resource. Must be unique in the parent folder.\n   * @param  {object} [options.meta] - a free-form object for storing metadata associated with this resource.\n   * @param  {string} [options.parentId] - the id of the parent resource. If omitted, will default to the appropriate\n   * root folder based on the type of resource being created.\n   * @param  {string} [options.provenance] - a description of the provenance of the resource. Markdown format is\n   * supported.\n   * @param  {object} [options.schema] - optional schema definition.\n   * @param  {string} [options.shareMode] - the share mode assigned to the new resource. One of [`\"pw\"`, `\"pr\"`,\n   * `\"tr\"`], corresponding to \"public read/write\", \"public read/trusted write\", \"trusted only\".\n   * @param  {string[]} [options.tags] - a list of tags to associate with the resource.\n   * @param  {bool} [wait=false] - indicates if the call should wait for the index to be built before it returns.\n   */\n  addResource(options, wait) {\n    const request = buildCommandRequest.call(this, \"resource/create\", options);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.addResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addResource\"))\n      .then((result) => {\n        if (wait) {\n          return waitForIndex.call(this, result.response.id)\n            .then(() => {\n              return result;\n            });\n        } else {\n          return result;\n        }\n      });\n  }\n\n  /**\n   * Adds read and/or write permission for an account to access a resource. Permission is required\n   * equivalent to that which is being added, e.g. adding write permission requires existing\n   * write access.\n   * @param  {string} resourceId - The resource id\n   * @param  {string} accountId - The account id to assign permission to\n   * @param  {string} sourceId - The id of the resource acting as the source of the access. This\n   * is usually the same as the target `resourceId`, but can also be a parent resource. For example,\n   * if write access is granted with the sourceId set to be a parent, then if the permission is\n   * revoked from the parent resource it will also be revoked from this resource.\n   * @param  {string[]} access - The access, one or more of [`\"r\"`, `\"w\"`]. Can be an array or an individual\n   * string.\n   * @example <caption>add access to an account</caption>\n   * tdxApi.addResourceAccess(myResourceId, \"bob@acme.com/tdx.acme.com\", myResourceId, [\"r\"]);\n   */\n  addResourceAccess(resourceId, accountId, sourceId, access) {\n    const request = buildCommandRequest.call(this, \"resourceAccess/add\", {\n      rid: resourceId,\n      aid: accountId,\n      src: sourceId,\n      acc: [].concat(access),\n    });\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.addResourceAccess: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"addResourceAccess\"));\n  }\n\n  /**\n   * Permanently deletes a resource.\n   * @param  {string} resourceId - the id of the resource to delete. Requires write permission\n   * to the resource.\n   */\n  deleteResource(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/delete\", {id: resourceId});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteResource\"));\n  }\n\n  /**\n   * Permanently deletes a list of resources.\n   * Will fail **all** deletes if any of the permission checks fail.\n   * @param  {string[]} resourceIdList - This list of resource ids to delete.\n   * @return  {CommandResult}\n   */\n  deleteManyResources(resourceIdList) {\n    const request = buildCommandRequest.call(this, \"resource/deleteMany\", {payload: resourceIdList});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteManyResources: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteManyResources\"));\n  }\n\n  /**\n   * Upload a file to a resource.\n   * @param  {string} resourceId - The id of the destination resource.\n   * @param  {object} file - The file to upload, obtained from an `<input type=\"file\">` element.\n   * @param  {bool} [stream=false] - Flag indicating whether the call should return a stream allowing\n   * callees to monitor progress.\n   */\n  fileUpload(resourceId, file, stream) {\n    const request = new Request(`${this.config.commandHost}/commandSync/resource/${resourceId}/upload`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: new Headers({\n        \"Authorization\": `Bearer ${this.accessToken}`,\n        \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n        \"Content-Length\": file.size,\n      }),\n      body: file,\n    });\n\n    const response = fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.fileUpload: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      });\n\n    if (stream) {\n      return response;\n    } else {\n      return response\n      .then((response) => {\n        return [response, response.text()];\n      })\n      .spread((response, text) => {\n        if (response.ok) {\n          return Promise.resolve(text);\n        } else {\n          return Promise.reject(handleError(\"fileUpload\", {code: \"failure\", message: text}));\n        }\n      });\n    }\n  }\n\n  /**\n   * Move resource from one folder to another. Requires write permission on the resource, the\n   * source parent and the target parent resources.\n   * @param  {string} id - the id of the resource to move.\n   * @param  {string} fromParentId - the current parent resource to move from.\n   * @param  {string} toParentId - the target folder resource to move to.\n   */\n  moveResource(id, fromParentId, toParentId) {\n    const request = buildCommandRequest.call(this, \"resource/move\", {id, fromParentId, toParentId});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.moveResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"moveResource\"));\n  }\n\n  /**\n   * Resets the resource index. This involves deleting existing indexes and rebuilding them. May take\n   * a while depending on the size of any associated dataset and the number and complexity of indexes.\n   * @param  {string} resourceId - the id of the resource, requires write permission.\n   */\n  rebuildResourceIndex(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/index/rebuild\", {id: resourceId});\n    let result;\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.rebuildResourceIndex: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"rebuildIndex\"))\n      .then((res) => {\n        result = res;\n        return waitForIndex.call(this, result.response.id, \"built\");\n      })\n      .then(() => {\n        return result;\n      });\n  }\n\n  /**\n   * Removes access for an account to a resource. Permission is required\n   * equivalent to that which is being added, e.g. adding write permission requires existing\n   * write access.\n   * @param  {string} resourceId - The resource id.\n   * @param  {string} accountId - The account id to remove access from.\n   * @param  {string} addedBy - The account id that originally added the access, probably your\n   * account id.\n   * @param  {string} sourceId - The source of the access, usually the resource itself.\n   * @param  {string[]} access - The access, one or more of [`\"r\"`, `\"w\"`].\n   */\n  removeResourceAccess(resourceId, accountId, addedBy, sourceId, access) {\n    const request = buildCommandRequest.call(this, \"resourceAccess/delete\", {\n      rid: resourceId,\n      aid: accountId,\n      by: addedBy,\n      src: sourceId,\n      acc: access,\n    });\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.removeResourceAccess: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"removeResourceAccess\"));\n  }\n\n  /**\n   * Set the resource schema.\n   * @param  {string} resourceId - The id of the dataset-based resource.\n   * @param  {object} schema - The new schema definition. TODO - document\n   * @return  {CommandResult}\n   */\n  setResourceSchema(resourceId, schema) {\n    const request = buildCommandRequest.call(this, \"resource/schema/set\", {id: resourceId, schema});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceSchema: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"setResourceSchema\"));\n  }\n\n  /**\n   * Set the share mode for a resource.\n   * @param  {string} resourceId - The resource id.\n   * @param  {string} shareMode - The share mode to set, one or [`\"pw\"`, `\"pr\"`, `\"tr\"`] corresponding to\n   * 'public read/write', 'public read, trusted write', 'trusted only'.\n   */\n  setResourceShareMode(resourceId, shareMode) {\n    const request = buildCommandRequest.call(this, \"resource/setShareMode\", {id: resourceId, shareMode});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourceShareMode: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"setResourceShareMode\"));\n  }\n\n  /**\n   * Sets the permissive share mode of the resource. Permissive share allows anybody with acces to the resource\n   * to share it with others. If a resource is not in permissive share mode, only the resource owner\n   * can share it with others.\n   * @param  {string} resourceId - The resource id.\n   * @param  {bool} allowPermissive - The required permissive share mode.\n   */\n  setResourcePermissiveShare(resourceId, allowPermissive) {\n    const request = buildCommandRequest.call(this, \"resource/setPermissiveShare\", {\n      id: resourceId,\n      permissiveShare: allowPermissive ? \"r\" : \"\",\n    });\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.setResourcePermissiveShare: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"setResourcePermissiveShare\"));\n  }\n\n  /**\n   * Suspends the resource index. This involves deleting any existing indexes. Requires write permission. When\n   * a resource index is in `suspended` status, it is not possible to run any queries or updates against\n   * the resource.\n   * @param  {string} resourceId - the id of the resource. Requires write permission.\n   */\n  suspendResourceIndex(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/index/suspend\", {id: resourceId});\n    let result;\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.suspendResourceIndex: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"suspendIndex\"))\n      .then((res) => {\n        result = res;\n        return waitForIndex.call(this, result.response.id, \"suspended\");\n      })\n      .then(() => {\n        return result;\n      });\n  }\n\n  /**\n   * Removes all data from the resource. Applicable to dataset-based resources only. This can not be\n   * undone.\n   * @param  {string} resourceId - The resource id to truncate.\n   */\n  truncateResource(resourceId) {\n    const request = buildCommandRequest.call(this, \"resource/truncate\", {id: resourceId});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.truncateResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"truncateResource\"));\n  }\n\n  /**\n   * Modify one or more of the meta data associated with the resource.\n   * @param  {string} resourceId - id of the resource to update\n   * @param  {object} update - object containing the properties to update. Can be one or more of those\n   * listed below. See the {@link TDXApi#addResource} method for semantics and syntax of each property.\n   * @param  {string} [update.derived]\n   * @param  {string} [update.description]\n   * @param  {string} [update.meta]\n   * @param  {string} [update.name]\n   * @param  {string} [update.provenance]\n   * @param  {string} [update.schema]\n   * @param  {string} [update.tags]\n   */\n  updateResource(resourceId, update) {\n    const request = buildCommandRequest.call(this, \"resource/update\", {id: resourceId, ...update});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"updateResource\"));\n  }\n\n  /*\n   *\n   *  RESOURCE DATA COMMANDS\n   *\n   */\n\n   /**\n   * Add data to a dataset resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to add data to.\n   * @param  {object|array} data - The data to add. Must conform to the schema defined by the resource metadata.\n   * Supports creating an individual document or many documents.\n   * @example <caption>create an individual document</caption>\n   * // Assumes the dataset primary key is 'lsoa'\n   * tdxApi.addData(myDatasetId, {lsoa: \"E0000001\", count: 398});\n   * @example <caption>create multiple documents</caption>\n   * tdxApi.addData(myDatasetId, [\n   *  {lsoa: \"E0000001\", count: 398},\n   *  {lsoa: \"E0000002\", count: 1775},\n   *  {lsoa: \"E0000005\", count: 4533},\n   * ]);\n   */\n  addData(datasetId, data) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/createMany\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.createData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"updateData\"));\n  }\n\n  /**\n   * Deletes data from a dataset-based resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to delete data from.\n   * @param  {object|array} data - The primary key data to delete.\n   */\n  deleteData(datasetId, data) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/deleteMany\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteData\"));\n  }\n\n  /**\n   * Deletes data from a dataset-based resource using a query to specify the documents to be deleted.\n   * @param  {string} datasetId - The id of the dataset-based resource to delete data from.\n   * @param  {object} query - The query that specifies the data to delete. All documents matching the\n   * query will be deleted.\n   * @example\n   * // Delete all documents with English lsoa.\n   * tdxApi.deleteDataByQuery(myDatasetId, {lsoa: {$regex: \"E*\"}});\n   */\n  deleteDataByQuery(datasetId, query) {\n    const postData = {\n      datasetId,\n      query,\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/deleteQuery\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteDataByQuery: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteDataByQuery\"));\n  }\n\n  /**\n   * Patches data in a dataset resource. Uses the [JSON patch](https://tools.ietf.org/html/rfc6902) format,\n   * which involves defining the primary key data followed by a flexible update specification.\n   * @param  {string} datasetId - The id of the dataset-based resource to update.\n   * @param  {object} data - The patch definition.\n   * @param  {object|array} data.__update - An array of JSON patch specifications.\n   * @example <caption>patch a single value in a single document</caption>\n   * tdxApi.patchData(myDatasetId, {lsoa: \"E000001\", __update: [{p: \"count\", m: \"r\", v: 948}]});\n   * @example <caption>patch a more than one value in a single document</caption>\n   * tdxApi.patchData(myDatasetId, {lsoa: \"E000001\", __update: [\n   *   {p: \"count\", m: \"r\", v: 948}\n   *   {p: \"modified\", m: \"a\", v: Date.now()}\n   * ]});\n   */\n  patchData(datasetId, data) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/upsertMany\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.patchData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"patchData\"));\n  }\n\n  /**\n   * Updates data in a dataset resource.\n   * @param  {string} datasetId - The id of the dataset-based resource to update.\n   * @param  {object|array} data - The data to update. Must conform to the schema defined by the resource metadata.\n   * Supports updating individual or multiple documents.\n   * @param  {bool} [upsert=false] - Indicates the data should be created if no document is found matching the\n   * primary key.\n   * @example <caption>update an existing document</caption>\n   * tdxApi.updateData(myDatasetId, {lsoa: \"E000001\", count: 488});\n   * @example <caption>upsert a document</caption>\n   * // Will create a document if no data exists matching key 'lsoa': \"E000004\"\n   * tdxApi.updateData(myDatasetId, {lsoa: \"E000004\", count: 288, true});\n   */\n  updateData(datasetId, data, upsert) {\n    const postData = {\n      datasetId,\n      payload: [].concat(data),\n      __upsert: !!upsert,\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/updateMany\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"updateData\"));\n  }\n\n  /**\n   * Updates data in a dataset-based resource using a query to specify the documents to be updated.\n   * @param  {string} datasetId - The id of the dataset-based resource to update data in.\n   * @param  {object} query - The query that specifies the data to update. All documents matching the\n   * query will be updated.\n   * @example\n   * // Update all documents with English lsoa.\n   * tdxApi.deleteDataByQuery(myDatasetId, {lsoa: {$regex: \"E*\"}}, {count: 1000});\n   */\n  updateDataByQuery(datasetId, query, update) {\n    const postData = {\n      datasetId,\n      query,\n      update,\n    };\n    const request = buildCommandRequest.call(this, \"dataset/data/updateQuery\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.updateDataByQuery: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"updateDataByQuery\"));\n  }\n\n  /*\n   *\n   *  DATABOT COMMANDS\n   *\n   */\n\n  /**\n   * Deletes a databot instance and all output/debug data associated with it.\n   * @param  {string} instanceId - The id of the instance to delete.\n   */\n  deleteDatabotInstance(instanceId) {\n    const postData = {\n      instanceId,\n    };\n    const request = buildCommandRequest.call(this, \"databot/deleteInstance\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.deleteDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"deleteDatabotInstance\"));\n  }\n\n  /**\n   * Sends a command to a databot host. Reserved for system use.\n   * @param  {string} command - The command to send. Must be one of [\"stopHost\", \"updateHost\", \"runInstance\",\n   * \"stopInstance\", \"clearInstance\"]\n   * @param  {string} hostId - The id of the host.\n   * @param  {string} [hostIp] - The ip address of the host. If omitted, the command will be sent to all\n   * host ip addresses.\n   * @param  {number} [hostPort] - The port number of the host. If omitted, the command will be sent to\n   * all host ports.\n   */\n  sendDatabotHostCommand(command, hostId, hostIp, hostPort) {\n    const postData = {\n      hostId,\n      hostIp,\n      hostPort,\n      command,\n    };\n    const request = buildCommandRequest.call(this, \"databot/host/command\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.sendDatabotHostCommand: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"sendDatabotHostCommand\"));\n  }\n\n  /**\n   * Starts a databot instance.\n   * @param  {string} databotId - The id of the databot definition to start.\n   * @param  {object} payload - The instance input and parameters.\n   * @param  {number} [payload.authTokenTTL] - The time-to-live to use when creating the auth token, in seconds.\n   * Will default to the TDX-configured default if not given (usually 1 hour).\n   * @param  {number} [payload.chunks=1] - The number of processes to instantiate. Each will be given the same input\n   * data, with only the chunk number varying.\n   * @param  {bool} [payload.debugMode=false] - Flag indicating this instance should be run in debug mode, meaning\n   * all debug output will be captured and stored on the TDX. n.b. setting this will also restrict the hosts available\n   * to run the instance to those that are willing to run in debug mode.\n   * @param  {string} [payload.description] - The description for this instance.\n   * @param  {object} [payload.inputs] - The input data. A free-form object that should conform to the\n   * specification in the associated databot definition.\n   * @param  {string} [payload.name] - The name to associate with this instance, e.g. \"Male population\n   * projection 2017\"\n   * @param  {string} [payload.overwriteExisting] - The id of an existing instance that should be overwritten.\n   * @param  {number} [payload.priority] - The priority to assign this instance. Reserved for system use.\n   * @param  {string} payload.shareKeyId - The share key to run the databot under.\n   * @param  {string} [payload.shareKeySecret] - The secret of the share key. Ignored if the share key id refers to a\n   * user-based account.\n   */\n  startDatabotInstance(databotId, payload) {\n    const postData = {\n      databotId,\n      instanceData: payload,\n    };\n    const request = buildCommandRequest.call(this, \"databot/startInstance\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.startDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"startDatabotInstance\"));\n  }\n\n  /**\n   * Terminates or pauses a running databot instance.\n   * @param  {string} instanceId - The id of the instance to terminate or pause.\n   * @param  {string} mode - One of [`\"stop\"`, `\"pause\"`, `\"resume\"`]\n   */\n  stopDatabotInstance(instanceId, mode) {\n    const postData = {\n      instanceId,\n      mode,\n    };\n    const request = buildCommandRequest.call(this, \"databot/stopInstance\", postData);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.stopDatabotInstance: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"stopDatabotInstance\"));\n  }\n\n  /*\n   *\n   *  QUERIES\n   *\n   */\n\n  /**\n   * Gets all data from the given dataset that matches the filter provided.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - A mongodb filter object. If omitted, all data will be retrieved.\n   * @param  {object} [projection] - A mongodb projection object. Should be used to restrict the payload to the\n   * minimum properties needed if a lot of data is being retrieved.\n   * @param  {object} [options] - A mongodb options object. Can be used to limit, skip, sort etc. Note a default\n   * `limit` of 1000 is applied if none is given here.\n   * @param  {bool} [options.nqmMeta] - When set, the resource metadata will be returned along with the dataset\n   * data. Can be used to avoid a second call to `getResource`. Otherwise a URL to the metadata is provided.\n   * @return  {DatasetData}\n   */\n  getDatasetData(datasetId, filter, projection, options) {\n    const request = buildQueryRequest.call(this, `datasets/${datasetId}/data`, filter, projection, options);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatasetData: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getDatasetData\"));\n  }\n\n  /**\n   * Gets a count of the data in a dataset-based resource, after applying the given filter.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {object} [filter] - An optional mongodb filter to apply before counting the data.\n   */\n  getDatasetDataCount(datasetId, filter) {\n    const request = buildQueryRequest.call(this, `datasets/${datasetId}/count`, filter);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatasetDataCount: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getDatasetDataCount\"));\n  }\n\n  /**\n   * Gets a list of distinct values for a given property in a dataset-based resource.\n   * @param  {string} datasetId - The id of the dataset-based resource.\n   * @param  {string} key - The name of the property to use. Can be a property path, e.g. `\"address.postcode\"`.\n   * @param  {object} [filter] - An optional mongodb filter to apply.\n   * @return  {object[]} - The distinct values.\n   */\n  getDistinct(datasetId, key, filter, projection, options) {\n    const request = buildQueryRequest.call(\n      this,\n      `datasets/${datasetId}/distinct?key=${key}`,\n      filter,\n      projection,\n      options,\n    );\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDistinct: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getDatasetData\"));\n  }\n\n  /**\n   * Gets the details for a given resource id.\n   * @param  {string} resourceId - The id of the resource to retrieve.\n   * @param  {bool} [noThrow=false] - If set, the call won't reject or throw if the resource doesn't exist.\n   * @return  {Resource}\n   * @exception  Will throw if the resource is not found (see `noThrow` flag) or permission is denied.\n   */\n  getResource(resourceId, noThrow) {\n    const request = buildQueryRequest.call(this, `resources/${resourceId}`);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.getResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then((response) => {\n        if (noThrow) {\n          // If noThrow specified, return null if there is an error fetching the resource, rather than throwing.\n          if (response.ok) {\n            return response.json();\n          } else if (response.status === 404) {\n            return null;\n          } else {\n            return checkResponse(\"getResource\", response);\n          }\n        } else {\n          return checkResponse(\"getResource\", response);\n        }\n      });\n  }\n\n  /**\n   * Gets all resources that are ancestors of the given resource.\n   * @param  {string} resourceId - The id of the resource whose parents are to be retrieved.\n   * @return  {Resource[]}\n   */\n  getResourceAncestors(resourceId) {\n    const request = buildQueryRequest.call(this, `datasets/${resourceId}/ancestors`);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.getDatasetAncestors: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getResourceAncestors\"));\n  }\n\n  /**\n   * Gets the details of all resources that match the given filter.\n   * @param  {object} [filter] - A mongodb filter definition\n   * @param  {object} [projection] - A mongodb projection definition, can be used to restrict which properties are\n   * returned thereby limiting the payload.\n   * @param  {object} [options] - A mongodb options definition, can be used for limit, skip, sorting etc.\n   * @return  {Resource[]}\n   */\n  getResources(filter, projection, options) {\n    const request = buildQueryRequest.call(this, \"resources\", filter, projection, options);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.getResource: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getResources\"));\n  }\n\n  /**\n   * Retrieves all resources that have an immediate ancestor of the given schema id.\n   * @param  {string} schemaId - The id of the schema to match, e.g. `\"geojson\"`.\n   * @return  {Resource[]}\n   */\n  getResourcesWithSchema(schemaId) {\n    const filter = {\"schemaDefinition.parent\": schemaId};\n    return this.getResources(filter);\n  }\n\n  /**\n   * Retrieves an authorisation token for the given TDX instance\n   * @param  {string} tdx - The TDX instance name, e.g. `\"tdx.acme.com\"`.\n   * @return  {string}\n   */\n  getTDXToken(tdx) {\n    const request = buildQueryRequest.call(this, `tdx-token/${tdx}`);\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.getTDXToken: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getTDXToken\"));\n  }\n\n  /**\n   * Gets the details for a given zone (account) id.\n   * @param  {string} accountId - the id of the zone to be retrieved.\n   * @return  {Zone} zone\n   */\n  getZone(accountId) {\n    const request = buildQueryRequest.call(this, \"zones\", {username: accountId});\n    return fetch(request)\n      .catch((err) => {\n        errLog(\"TDXApi.getZone: %s\", err.message);\n        return Promise.reject(new Error(`${err.message} - [network error]`));\n      })\n      .then(checkResponse.bind(null, \"getZone\"));\n  }\n}\n\nexport default TDXApi;\n\n\n\n// WEBPACK FOOTER //\n// ./src/api-tdx.js"],"sourceRoot":""}